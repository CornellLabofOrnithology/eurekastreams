<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs title="A-Z Listing" thumbnail="${build.web.baseurl}/style/images/az_app.png" title_url="http://eurekastreams.org" author="Eureka Streams"
        description="A-Z Listing app is used to browse and search an A-Z listing of predefined and personal bookmarks." author_email="support@eurekastreams.org">
		<Require feature="opensocial-0.9" />
		<Require feature="osapi" />
		<Require feature="views" />
		<Require feature="dynamic-height" />
		<Require feature="opensocial-data"/>
		<Require feature="opensocial-data-context"/>
		<Require feature="opensocial-templates">
			<Param name="client">true</Param>
		</Require>
		<!--<Require feature="settitle" />-->
		<Require feature="eurekastreams-core" />
		<Require feature="xmlutil"/>
	    	<Optional feature="content-rewrite">
        	    	<Param name="expires">86400</Param>
    			<Param name="include-url"></Param>
	    		<Param name="minify-css">true</Param>
    			<Param name="minify-js">true</Param>
    			<Param name="minify-html">true</Param>
	        </Optional>
	</ModulePrefs>
	
	<Content type="html" view="default, canvas">
	<![CDATA[
        <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" " http://www.w3.org/ TR/html4/strict.dtd">
        <meta http-equiv="X-UA-Compatible" content="IE=7">
        <meta equiv="X-UA-Compatible" content="chrome=1">
		<link rel="stylesheet" type="text/css" href="${build.web.baseurl}/style/eureka-apps.css" />
		<script type="text/javascript" src="${build.web.baseurl}/scripts/external-js-min.js" ></script>
		<script type="text/javascript" src="${build.web.baseurl}/scripts/eureka-apps.js" ></script>
	]]>
	</Content>

	
    <Content type="html" view="default, canvas">
    <![CDATA[
	<script type="text/os-data" xmlns:os="http://ns.opensocial.org/2008/markup" >
            <os:ViewerRequest key="databindviewer"/>
            <os:PersonAppDataRequest key="appDataSet" userId="@viewer" appId="@app"/>
        </script>
        <script type="text/javascript">

			var userBookmarks = [];

			/**
			* Compares two bookmark objects (for sorting) by their titles.
			*/
			function bookmarkComparer(a, b)
			{
				var at = a.title.toLowerCase();
				var bt = b.title.toLowerCase();
				return at < bt ? -1 : (at > bt ? 1 : 0);
			}
			
			/**
			* Determine if there is a user-defined bookmark for the given URL.
			*/
			function isUrlBookmarked(url)
			{
				for (var x in userBookmarks)
				{
					if (userBookmarks[x].url == url)
					{
						return true;
					}
				}
				return false;
			}
			
            /**
            * Add the passed in title and url to the user's bookmarks.
            */
            function addUrl(title, cleanTitle, url, callback)
            {
				if (isUrlBookmarked(url))
				{
					alert('URL is already bookmarked.');
					return;
				}
			
				if (title == null)
				{
					title = gadgets.util.unescapeString(cleanTitle);
				}
				else if (cleanTitle == null)
				{
					cleanTitle = gadgets.util.escapeString(title);
				}
				
				var bookmark = {'title' : title, 'cleanTitle' : cleanTitle, 'url' : url};
				userBookmarks.push(bookmark);
				userBookmarks.sort(bookmarkComparer);
			
				//save the link back to the app data store.
				var req = opensocial.newDataRequest();
				req.add(req.newUpdatePersonAppDataRequest('bookmarks', gadgets.json.stringify(userBookmarks)));
				req.send(function(response)
				{
					if(response.hadError())
					{
						eurekastreams.core.triggerShowNotificationEvent('Error occurred saving bookmark');
					}
					else
					{
						eurekastreams.core.triggerShowNotificationEvent('Bookmark saved');
						callback(title, cleanTitle, url, callback);
					}
				});
            }

			function prepareUserData()
			{
				var viewerJSON = opensocial.data.DataContext.getDataSet("databindviewer");
				var rawData = opensocial.data.DataContext.getDataSet("bookmarksDataSet")[viewerJSON.id].bookmarks;
				if (rawData != null)
				{
					rawData = gadgets.json.parse(rawData);
					
					for (var x in rawData)
					{
						var entry = rawData[x];
						if (entry.title == null)
						{
							entry.title = gadgets.util.unescapeString(entry.cleanTitle);
						}
						else if (entry.cleanTitle == null)
						{
							entry.cleanTitle = gadgets.util.escapeString(entry.title);
						}
						userBookmarks.push({'title':entry.title, 'cleanTitle':entry.cleanTitle, 'url':entry.url});
					}
					userBookmarks.sort(bookmarkComparer);
				}
			}
			
        </script>

		<script type="text/os-template" xmlns:os="http://ns.opensocial.org/2008/markup">
            <div id="entire-app"></div>
        </script>	
		
		<script type="text/os-data" xmlns:os="http://ns.opensocial.org/2008/markup" >
            <os:ViewerRequest key="databindviewer"/>
            <os:PersonAppDataRequest key="bookmarksDataSet" userId="@viewer" appId="@app"/>
            <os:HttpRequest refreshInterval="0"  key="predefBookmarksDataSet" href="${build.web.baseurl}/org/eurekastreams/gadgets/azlisting.json" />
        </script>

		<script type="text/os-template" xmlns:os="http://eurekastreams.org" tag="uos:errorTemplate">
			<div class="message error">Error retrieving data.</div>
		</script>
		
        <style type="text/css">
            ol
            {
               list-style-type: none;
               padding-left: 0px;
               margin:0px;
            }
            li
            {
                padding:0px;
                margin:0px;
            }
	.list-view-item.with-metadata .metadata
	{
		display:none;
	}
	div.list-view-item:hover .metadata
	{
		display:block;
	}
        </style>
		
    ]]>
    </Content>

    <Content type="html" view="default">
    <![CDATA[

		<script type="text/javascript">
		
			var addBookmarkFieldsRegex  = /^title=([^&]*)&url=(.*)$/;
			var titleValidationRegex = /^.{1,100}$/;
			var urlValidationRegex = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
			var shareValidationRegex1 = /^(file:\/\/\/)?\\\\[\w.-]+(\\[^\/\\]+)+/;
			var shareValidationRegex2 = /^file:\/{5}[\w.-]+(\/[^\/\\]+)+/;
		
			var bookmarkListView = null;
			
			var predefLinks = [];
			var categoryNames = [];
			
		
			function preparePredefData()
			{
				var dataset = opensocial.data.DataContext.getDataSet('predefBookmarksDataSet');
				if ((dataset.rc && dataset.rc != 200) || dataset.content == null || dataset.content.links == null)
				{
					return;
				}
			
				var list = dataset.content.links;
				for (var x in list)
				{
					var entry = list[x];
					if (entry.title != entry.url)
					{
						entry.cleanTitle = gadgets.util.escapeString(entry.title);
						predefLinks.push(entry);

						var categoryName = entry.category;
						if (categoryName != null && jQuery.inArray(categoryName, categoryNames) < 0)
						{
							categoryNames.push(categoryName);
						}
					}
				}
				categoryNames.sort();
			}
			
			
			/**
            * Base Init Method
            */
            function init()
            {
				prepareUserData();
				preparePredefData();
				
				var main = jQuery("<div/>");
				
				var search = new Eureka.SearchBar(function(value)
				{
					search.setResultsPanel(searchBookmarks(value));
				});
				main.append(search.getContainer());
				
				var browseButton = jQuery("<div class='gadget-browse'>Browse</div>");
				browseButton.click(function(event) {  gadgets.views.requestNavigateTo('canvas'); });
				
				var ex = new Eureka.ExpandableSectionContainer();
				
				bookmarkListView = new Eureka.ListView();
				bookmarkListView.getContainer().addClass('user-bookmark-list');
				populateBookmarkList();
				
				var addForm = new Eureka.Form("Add a Bookmark", addBookmarkFromInput);
				addForm.addTextBox("title", "Bookmark Title...", "");
				addForm.addTextBox("url", "http://", "");
				addForm.addValidator("title", titleValidationRegex, "Title must be present and no longer than 100 characters.");
				addForm.addValidator("url.1", function(val) { return urlValidationRegex.test(val) || shareValidationRegex1.test(val) || shareValidationRegex2.test(val); }, "URL must be present and valid.");
				addForm.addValidator("url.2", function(val) { return !isUrlBookmarked(val); }, "URL is already bookmarked.");
				
				var categoryList = new Eureka.ListView();
				ex.addSection("Categories", categoryList.getContainer(), false, null, null, browseButton);
				ex.addSection("My Bookmarks", bookmarkListView.getContainer(), true, true, addForm);
				categoryList.addItem('All', "", "", null, function() { gadgets.views.requestNavigateTo('canvas'); });
				
				var categoryFuncCreator = function(category)
				{
					return function()
					{
						gadgets.views.requestNavigateTo(new gadgets.views.View("canvas"), {'category' : category });
					};
				};
				for (var x in categoryNames)
				{
					var category = categoryNames[x];
					categoryList.addItem(gadgets.util.escapeString(category), "", "", null, categoryFuncCreator(category));
				}
				
				main.append(ex.getContainer());
				Eureka.Container.switchView(main);
				if (userBookmarks.length == 0)
				{
					jQuery(".section-num-0").addClass("hide-edit");
				}
				else
				{
					jQuery(".section-num-0").removeClass("hide-edit");
				}
            }
			
			function populateBookmarkList()
			{
				if (userBookmarks.length == 0)
				{
					jQuery(".section-num-0").addClass("hide-edit");
				}
				else
				{
					jQuery(".section-num-0").removeClass("hide-edit");
				}
				var bookmarkFuncCreator = function(bookmark)
				{
					return function()
					{
						window.open(bookmark.url);
					};
				};
				var bookmarkDeleteFuncCreator = function(bookmark)
				{
					return function()
					{
						deleteBookmark(bookmark);
					};
				};
				for (var x in userBookmarks)
				{
					var bookmark = userBookmarks[x];
					var item = bookmarkListView.addItem(bookmark.cleanTitle, "", "", null, null, true, bookmarkDeleteFuncCreator(bookmark));

					// wrap part of the list item in a link (use a link instead of programmatic opening of bookmarks to allow right-click, etc.)
					var elem = jQuery('<a target="_blank"></a>').attr('href', bookmark.url).addClass('bookmark-wrapper-link');
					item.wrapInner(elem);
					item.append(item.find('.gadget-remove-button'));
				}
			}

			function createBookmarkClickFunction(bookmark)
			{
				return function()
				{
					window.open(bookmark.url);
				};
			}
			
			function addBookmarkFromInput(input)
            {
				var result = addBookmarkFieldsRegex.exec(input);
				var title = decodeURIComponent(result[1]).replace(/\+/g, " ");
				var url = decodeURIComponent(result[2]);
				
				if (url.substr(0,2) == '\\\\')
				{
					url = 'file:///' + url;
				}
			
                addUrl(title, null, url, function()
				{
					// clear the list view and rebuild
					bookmarkListView.getContainer().children().remove();
					populateBookmarkList();
					
					// close the entry form
					Eureka.Container.goBack();
				});
            }

			
			/**
            * Remove a bookmark from the My Bookmarks list.
            */
            function deleteBookmark(bookmark)
            {
				for(var i=0; i < userBookmarks.length; i++) 
				{
					if (userBookmarks[i] == bookmark)
					{
						userBookmarks.splice(i, 1);
						
						if (userBookmarks.length == 0)
						{
							jQuery(".section-num-0").addClass("hide-edit");
							jQuery(".section-num-0 .no-items").show();
						}

						var req = opensocial.newDataRequest();
						req.add(req.newUpdatePersonAppDataRequest('bookmarks', gadgets.json.stringify(userBookmarks)));
						req.send(function(response)
						{
							if(response.hadError())
							{
								eurekastreams.core.triggerShowNotificationEvent('Error occurred removing bookmark');
							}
                            else
                            {
						        eurekastreams.core.triggerShowNotificationEvent('Bookmark deleted.');
                            }
						});
						return;
					}
				}
				eurekastreams.core.triggerShowNotificationEvent('Internal error occurred removing bookmark.  Please refresh app.');
            }			

            /**
            * Simple comparison callback for the JSON Links Array used in this gadget.
            **/
            function compareLinksJSONArray(a, b){return a.title.toLowerCase() == b.title.toLowerCase()}
			
			/**
            * Straight forward approach to removing duplicates from a JSON Array.
            */
            function removeDuplicateElements(arrayName)
            {
                var newArray=new Array();
                label:for(var i=0; i<arrayName.length;i++ )
                {
                    for(var j=0; j<newArray.length;j++ )
                    {
                      if(compareLinksJSONArray(newArray[j],arrayName[i]))
                      continue label;
                    }
                    newArray[newArray.length] = arrayName[i];
                }
                return newArray;
            }

			function searchList(list,searchTerm)
			{
				searchTerm = searchTerm.toLowerCase();
				var matches = [];
				for(var x in list)
				{
					if (list[x].title.toLowerCase().indexOf(searchTerm) >= 0)
					{
						matches.push(list[x]);
					}
				}
				return matches;
			}
	
            /**
            * Search the combined MyBookmarks as well as the default bookmarks list.
            */
            function searchBookmarks(searchTerm)
            {
				if(searchTerm == null || searchTerm == '')
				{
					return null;
				}
			
				// search both sources (user, predefined)
				var userMatches = searchList(userBookmarks, searchTerm);
				var predefMatches = searchList(predefLinks, searchTerm);
				
				// combine results
				var matches = userMatches.concat(predefMatches);
				matches.sort(bookmarkComparer);
				matches = removeDuplicateElements(matches);
				
				// build controls
				if (matches.length > 0)
				{
					var addBookmarkFuncCreator = function(id,bookmark)
					{
						return function()
						{
							var event = arguments[0] || window.event; 
							if(event.stopPropagation)
							{ 
								event.stopPropagation(); 
							}
							else 
							{ 
								event.cancelBubble = true; 
							}
							jQuery('#'+id).unbind('click').html('Added');
							addUrl(null, bookmark.cleanTitle, bookmark.url, function() 
							{ 
								bookmarkListView.getContainer().children().remove();
								populateBookmarkList(); 
							});
						};
					};
				
					var listView = new Eureka.ListView();
					listView.getContainer().addClass('search-result-list');
					for (var x in matches)
					{
						var id = "id-" + x;
						var bookmark = matches[x];
						
						if (isUrlBookmarked(bookmark.url))
						{
							listView.addItem(bookmark.cleanTitle, "", 'Added', null, createBookmarkClickFunction(bookmark));
						}
						else
						{
							var item = listView.addItem(bookmark.cleanTitle, "", '+ Add', null, createBookmarkClickFunction(bookmark));
							item.find('.metadata').attr('id',id).click(addBookmarkFuncCreator(id,bookmark));
						}
					}
					return listView.getContainer();
				}
				else
				{
					return null;
				}
			}
			
			gadgets.util.registerOnLoadHandler(function() { Eureka.Container.init("entire-app", false, init); });
		</script>
		
		<script type="text/os-template" xmlns:os="http://eurekastreams.org" tag="uos:noSearchResultsTemplate">
			<div>No matches found.</div>
		</script>
		
		<style type="text/css">
		
		    .with-metadata.list-view-item .fade-out, .list-view-item .fade-out
			{
			    right:40px;
			}
			
			.with-metadata.list-view-item .item-contents, .list-view-item .item-contents
			{
			    margin-right:40px;
			}
			
			.metadata
			{
			    float:right;
			    font-size:12px;
			    margin-right:5px;
			    margin-top:-19px;   
			}

			a.bookmark-wrapper-link
            {
				color: black;
				cursor: pointer;
			}
			.list-view-item .item-contents
			{
				margin-right: 10px;
            }
			.list-view-item .fade-out 
			{
				right: 10px;
				
			}
			.user-bookmark-list .list-view-item
			{
				cursor: auto;
			}
        </style>
    ]]>
    </Content>
    <Content type="html" view="canvas">
    <![CDATA[

		<script type="text/javascript">

			var predefLinks = [];
			var categoryNames = [];
			var predefByCategory = {};
			var predefByAlpha = {};
			var predefAlphaTabs = {};
			var panels = [];
		
		
			function preparePredefData(list)
			{
				var currAlpha = null;
				for (var x in list)
				{
					var entry = list[x];
					if (entry.title == entry.url)
					{
						currAlpha = gadgets.util.escapeString(entry.title);
						predefByAlpha[currAlpha] = [];
					}
					else
					{
						entry.cleanTitle = gadgets.util.escapeString(entry.title);
						predefLinks.push(entry);
						if (currAlpha != null)
						{
							predefByAlpha[currAlpha].push(entry);
						}
						var categoryName = entry.category;
						if (categoryName != null)
						{
							var categoryList = predefByCategory[categoryName];
							if (categoryList == null)
							{
								categoryList = predefByCategory[categoryName] = [];
								categoryNames.push(categoryName);
							}
							categoryList.push(entry);
						}
					}
				}
				categoryNames.sort();
			}

            var idPost = 0;
			function makeDataForTable(inData)
			{
				var ret = {};
				var data  = [];

				for (var x in inData)
				{
					var entry = inData[x];
					var id = "id" + idPost;
                    idPost++;
					var row = [];
					row.push("<a id='"+id+"l' target='_blank' href='"+entry.url+"'>"+entry.title+"</a>");
					if (isUrlBookmarked(entry.url))
					{
						row.push('<span class="add-bookmark bookmark-added">Already added</span>');
					}
					else
					{
						row.push("<a id='"+id+"a' href='javascript:addBookmark(\""+entry.url+"\", \""+id+"\");' class='add-bookmark'>+ add bookmark</a>");
					}
					data.push(row);
				}
				ret.data = data;
				return ret;
			}
		

			function init()
            {
				var dataset = opensocial.data.DataContext.getDataSet('predefBookmarksDataSet');
				if ((dataset.rc && dataset.rc != 200) || dataset.content == null || dataset.content.links == null)
				{
					opensocial.template.getTemplate('uos:errorTemplate').renderInto('entire-app');
					return;
				}
				
				// prepare data
				prepareUserData();
				var predef = dataset.content.links;
				preparePredefData(predef);
				
				// get the initial category to display
				var requestedCategory = null;
				var params = gadgets.views.getParams();
				if (params.length > 0)
				{
					params = gadgets.json.parse(params);
					requestedCategory = params['category'];
				}
				
				var tabs = new Eureka.TabPanel();

				var categoryList = new Eureka.ListView();
				var initialItem = categoryList.addItem("All", "", "", new Eureka.BasicContainer(tabs.getContainer(), "All A-Z listings", false).getContainer(), null, false);

				var ex = new Eureka.ExpandableSectionContainer();
				ex.addSection("Categories", categoryList.getContainer(), true);

				Eureka.Container.switchView(ex.getContainer());

				for (var x in predefByAlpha)
				{
					tabs.addTab(x, jQuery('<div id="predefByAlpha-'+x+'"></div>'), x == predefByAlpha[predefByAlpha.length-1], 
                        function(id, container) 
                        { 
                            var theTable = new Eureka.Table(makeDataForTable(predefByAlpha[id]));
                            setTimeout(function() { container.html(theTable.getContainer()); Eureka.Container.contentContainer.css("height", "auto"); Eureka.resize(); }, 100);
                        } 
                    );
					//tabs.addTab(x, new Eureka.Table(makeDataForTable(predefByAlpha[x])).getContainer(), x == predefByAlpha[predefByAlpha.length-1], function() { } );
				}
				jQuery(tabs.getContainer()).find('.tab:last-child').addClass('last');
				
				// create sections for each category
				for (var x in categoryNames)
				{
					var name = categoryNames[x];
					var cleanName = gadgets.util.escapeString(name);
					var panel = new Eureka.Table(makeDataForTable(predefByCategory[name]));
					
					var item = categoryList.addItem(cleanName, "", "", new Eureka.BasicContainer(panel.getContainer(), cleanName, false).getContainer(), null, false);
					if (cleanName == requestedCategory)
					{
						initialItem = item;
					}
				}
				
				initialItem.click();
				setTimeout(function() { Eureka.resize(); }, 150);
            }
			
			function addBookmark(url, id)
			{
				var addLink = jQuery('#' + id + 'a');
				if (addLink.text() != 'Added')
				{
					addLink.html('Added');
					var title = jQuery('#' + id + 'l').text();
					addUrl(title, null, url, function() {  });
				}
			}
			
			gadgets.util.registerOnLoadHandler(function() { Eureka.Container.init("entire-app", true, init); });
		</script>
		
        <style type="text/css">
			.link-panel
			{
				display: block;
				margin: 10px 30px 10px 20px;
				padding-left: 0px;
			}
            .link-item
            {
                padding-left:10px;
                display:block;
                border-bottom: 1px solid #FFF;
                /* *display:inline-block;
                zoom:1;*/
				padding-top: 5px;
				padding-bottom: 5px;
            }
			.link-item.odd
			{
				background-color: #EDEDED;
			}
            .bookmark
            {
                display:block;
                float:none;
                padding-right:150px;
            }
            .add-bookmark
            {
                font-size:11px;
                visibility:hidden;
            }
			.bookmark-added
			{
				color:  #0066CC;
            }
	    table.eureka-table
	    {
		margin-top:5px;
	    }
	    table.eureka-table td
	    {
		text-align:left;
		padding-left:13px;
		font-size:13px;
	    }
	    table.eureka-table tr:hover .add-bookmark
	    {
		visibility:visible;
	    }
	    table.eureka-table td.c0
	    {
 		width:540px;
	    }
            li.link-item:hover .bookmark a
            {
                color:#F4BD00;
            }

			.plus
            {
                background:url("/style/images/plus-icon.png") no-repeat scroll 0 0 transparent;
                height:10px;
                width:10px;
                padding-right:5px;
                display:inline-block;
                *display:inline;
                *position:absolute;
                *margin-left:-15px;
                *margin-top:3px;
                zoom:1;
            }
        </style>
		
    ]]>
    </Content>

</Module>
