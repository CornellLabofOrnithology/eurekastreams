<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd">

	<!-- ========== GENERATION ========== -->

	  <bean id="createNotificationsAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.notification.CreateNotificationsValidation">
                <constructor-arg ref="translators" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.notification.CreateNotificationsExecution">
                <constructor-arg ref="translators" />
                <constructor-arg ref="notifiersByIdMap" />
                <constructor-arg ref="getNotificationFilterPreferencesByPeopleIds" />
                <constructor-arg ref="getPersonByIdMapper" />
                <constructor-arg ref="notificationTypeToCategoryMap" />
                <constructor-arg>
                	<map>
                		<entry key="APP_ALERT" value-ref="notificationRecipientFiltersAppAlert" />
                		<entry key="EMAIL" value-ref="notificationRecipientFiltersEmail" />
                	</map>
                </constructor-arg>
				<constructor-arg ref="defaultNotificationProperties" />
				<constructor-arg ref="notificationPropertyLoadMappers" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>

    <bean id="sendPrebuiltNotificationAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg>
			<bean class="org.eurekastreams.server.action.validation.notification.SendPrebuiltNotificationValidation">
				<constructor-arg ref="getPersonByAccountIdMapperAllowNullResult" />
			</bean>
		</constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.notification.SendPrebuiltNotificationExecution">
                <constructor-arg ref="getPersonIdByAccountIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>


	<!-- ==== TRANSLATION ==== -->

    <util:map id="translators">
        <entry key="FOLLOWER">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.FollowerTranslator" />
        </entry>
        <entry key="LIKE">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.LikeTranslator">
            	<constructor-arg ref="bulkActivitiesMapper" />
            </bean>
        </entry>
        <entry key="COMMENT">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.CommentTranslator">
				<constructor-arg ref="getCommentorIdsByActivityId" />
				<constructor-arg ref="bulkActivitiesMapper" />
				<constructor-arg ref="getCommentsById" />
				<constructor-arg ref="getPersonIdsWithStarredActivity" />
            </bean>
        </entry>
        <entry key="STREAM_POST">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.StreamPostTranslator" />
        </entry>
        <entry key="GROUP_FOLLOWER">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.GroupFollowerTranslator">
                <constructor-arg ref="getGroupCoordinatorIdsByGroupIdMapper" />
            </bean>
        </entry>
        <entry key="GROUP_COMMENT">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.GroupCommentTranslator">
				<constructor-arg ref="getCommentorIdsByActivityId" />
				<constructor-arg ref="bulkActivitiesMapper" />
				<constructor-arg><null /></constructor-arg>
				<!-- Replace above with <constructor-arg ref="getGroupCoordinatorIdsByGroupIdMapper" /> to notify group coordinators when comments are posted to group streams. -->
				<constructor-arg ref="getCommentsById" />
				<constructor-arg ref="getPersonIdsWithStarredActivity" />
            </bean>
        </entry>
        <entry key="GROUP_STREAM_POST">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.GroupStreamPostTranslator">
                <constructor-arg ref="getFollowerPersonIdsForGroupByIdWithActivityNotificationsDbMapper" />
            </bean>
        </entry>
        <entry key="FLAG_ACTIVITY">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.FlagTranslator">
                <constructor-arg ref="bulkActivitiesMapper"/>
                <constructor-arg ref="getSystemAdministratorIds" />
            </bean>
        </entry>
        <entry key="REQUEST_NEW_GROUP">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.RequestNewGroupTranslator">
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg ref="getSystemAdministratorIds" />
            </bean>
        </entry>
        <entry key="REQUEST_NEW_GROUP_APPROVED">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.PendingGroupApprovedTranslator">
                <constructor-arg ref="getGroupByIdMapper" />
				<constructor-arg ref="getGroupCoordinatorIdsByGroupIdMapper" />
            </bean>
        </entry>
        <entry key="REQUEST_NEW_GROUP_DENIED">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.PendingGroupDeniedTranslator" />
        </entry>
        <entry key="REQUEST_GROUP_ACCESS">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.RequestGroupAccessTranslator">
                <constructor-arg ref="getGroupCoordinatorIdsByGroupIdMapper" />
            </bean>
        </entry>
        <entry key="REQUEST_GROUP_ACCESS_APPROVED">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.GroupMembershipResponseTranslator">
                <constructor-arg value="REQUEST_GROUP_ACCESS_APPROVED" />
            </bean>
        </entry>
        <entry key="REQUEST_GROUP_ACCESS_DENIED">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.GroupMembershipResponseTranslator">
                <constructor-arg value="REQUEST_GROUP_ACCESS_DENIED" />
            </bean>
        </entry>
		<entry key="EXTERNAL_PRE_BUILT">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.PreBuiltNotificationTranslator" />
        </entry>
    </util:map>

	<!-- ==== FILTERING ==== -->

    <util:map id="notificationTypeToCategoryMap" key-type="org.eurekastreams.server.domain.NotificationType" value-type="org.eurekastreams.server.domain.NotificationFilterPreference$Category">
        <entry key="POST_TO_PERSONAL_STREAM" value="POST_TO_PERSONAL_STREAM" />
        <entry key="COMMENT_TO_PERSONAL_STREAM" value="COMMENT" />
        <entry key="COMMENT_TO_PERSONAL_POST" value="COMMENT" />
        <entry key="COMMENT_TO_COMMENTED_POST" value="COMMENT" />
        <entry key="COMMENT_TO_SAVED_POST" value="COMMENT_TO_SAVED_ACTIVITY" />
        <entry key="FOLLOW_PERSON" value="FOLLOW_PERSON" />
        <entry key="POST_TO_GROUP_STREAM" value="POST_TO_GROUP_STREAM" />
        <entry key="POST_TO_JOINED_GROUP" value="POST_TO_JOINED_GROUP" />
        <entry key="COMMENT_TO_GROUP_STREAM" value="COMMENT_IN_GROUP_STREAM" />
        <entry key="FOLLOW_GROUP" value="FOLLOW_GROUP" />
        <entry key="LIKE_ACTIVITY" value="LIKE" />
        <entry key="FLAG_PERSONAL_ACTIVITY" value="FLAG_ACTIVITY" />
        <entry key="FLAG_GROUP_ACTIVITY" value="FLAG_ACTIVITY" />
        <entry key="REQUEST_NEW_GROUP" value="REQUEST_NEW_GROUP" />
        <entry key="REQUEST_GROUP_ACCESS" value="REQUEST_GROUP_ACCESS" />
        <entry key="REQUEST_GROUP_ACCESS_APPROVED" value="REQUEST_GROUP_ACCESS_RESPONSE" />
        <entry key="REQUEST_GROUP_ACCESS_DENIED" value="REQUEST_GROUP_ACCESS_RESPONSE" />
    </util:map>

	<!-- recipient filters - one list per notifier -->
	<util:list id="notificationRecipientFiltersAppAlert">
		<bean class="org.eurekastreams.server.action.execution.notification.filter.LockedUserRecipientFilter" />
	</util:list>
	<util:list id="notificationRecipientFiltersEmail">
		<bean class="org.eurekastreams.server.action.execution.notification.filter.LockedUserRecipientFilter" />
	</util:list>

	<!-- ==== RENDERING ==== -->

	<!-- Apache Velocity beans -->

	<bean id="velocityEngine" class="org.apache.velocity.app.VelocityEngine" init-method="init">
		<constructor-arg>
			<bean class="org.eurekastreams.server.service.utility.ResourcePropertyFileLoaderFactoryBean">
				<constructor-arg value="classpath:conf/velocity.properties" />
			</bean>
		</constructor-arg>
	</bean>

	<bean id="velocityGlobalContext" class="org.apache.velocity.VelocityContext">
		<constructor-arg>
			<map>
				<entry key="properties" value-ref="applicationProperties" />
				<entry key="pound" value="#" />
				<entry key="helper">
					<bean class="org.eurekastreams.server.action.execution.notification.notifier.NotificationMessageBuilderHelper" />
				</entry>
			</map>
		</constructor-arg>
	</bean>

	<!-- Notifiers -->

    <bean id="inAppNotifier" class="org.eurekastreams.server.action.execution.notification.notifier.InAppNotificationNotifier">
		<constructor-arg ref="velocityEngine" />
		<constructor-arg ref="velocityGlobalContext" />
		<constructor-arg ref="inAppNotifierMessageTemplates" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
        </constructor-arg>
        <constructor-arg ref="getCachedUnreadInAppNotificationCountsByUserId_FORCE_REFRESH" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.persistence.mappers.db.GetPlaceholderEntityMapper">
				<constructor-arg value="org.eurekastreams.server.domain.Person" />
			</bean>
        </constructor-arg>
    </bean>

    <bean id="emailNotifier" class="org.eurekastreams.server.action.execution.notification.notifier.EmailNotifier">
		<constructor-arg ref="velocityEngine" />
		<constructor-arg ref="velocityGlobalContext" />
		<constructor-arg ref="emailNotifierMessageTemplates" />
		<constructor-arg ref="getPersonsByIdsMapper" />
    </bean>
	
	
    <!-- all notifiers, by ID -->
    <util:map id="notifiersByIdMap">
        <entry key="APP_ALERT" value-ref="inAppNotifier" />
		<entry key="EMAIL" value-ref="emailNotifier" />
    </util:map>

    <!--
        names of notifiers which can be disabled, by ID, in order by columns
        on display
    -->
    <util:map id="notifierIdToDisplayMap" map-class="java.util.LinkedHashMap">
        <entry key="EMAIL" value="Email" />
        <entry key="APP_ALERT" value="In-App" />
    </util:map>

	<!-- data loaders (for lazy-loading) -->
	<util:map id="notificationPropertyLoadMappers" key-type="java.lang.Class">
		<entry key="org.eurekastreams.server.search.modelview.PersonModelView" value-ref="getPersonByIdMapperAllowNullResult" />
		<entry key="org.eurekastreams.server.search.modelview.DomainGroupModelView" value-ref="getGroupByIdMapperAllowNullResult" />
		<entry key="org.eurekastreams.server.domain.stream.ActivityDTO" value-ref="activityDTOMapper" />
		<entry key="org.eurekastreams.server.domain.OAuthConsumer" value-ref="getOAuthConsumerByConsumerKeyMapper" />
		<entry key="org.eurekastreams.server.domain.SystemSettings" value-ref="findSystemSettings" />
    </util:map>

	<!-- default properties for notifiers -->
	<util:map id="defaultNotificationProperties">
		<!-- always allow for system settings to be lazy-loaded via the property "settings" -->
		<entry key="settings">
			<bean class="org.eurekastreams.server.domain.Property" p:type="org.eurekastreams.server.domain.SystemSettings" />
		</entry>
	</util:map>

	<!-- ========== IN-APP ========== -->

	<bean id="getInAppNotificationCounts" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.ExecuteDomainMapperExecution">
            	<constructor-arg>
            		<bean class="org.eurekastreams.server.action.request.transformer.UsePrincipalPersonIdRequestTransformer" />
            	</constructor-arg>
                <constructor-arg ref="getCachedUnreadInAppNotificationCountsByUserId" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
	</bean>

	<bean id="getInAppNotifications" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.notification.inapp.GetInAppNotificationsExecution">
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.db.notification.GetInAppNotificationsByUserId">
						<!-- Maximum number of in-app notifications to fetch -->
						<constructor-arg value="500" />
					</bean>
				</constructor-arg>
				<constructor-arg ref="getPeopleByAccountIdsMapper" />
				<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
	</bean>

	<bean id="markInAppNotificationsRead" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.notification.inapp.ModifyInAppNotificationsExecution">
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.db.notification.MarkInAppNotificationsAsRead" />
				</constructor-arg>
				<constructor-arg ref="getCachedUnreadInAppNotificationCountsByUserId_FORCE_REFRESH" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
	</bean>

	<bean id="deleteInAppNotifications" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.notification.inapp.ModifyInAppNotificationsExecution">
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.db.notification.DeleteInAppNotifications" />
				</constructor-arg>
				<constructor-arg ref="getCachedUnreadInAppNotificationCountsByUserId_FORCE_REFRESH" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
	</bean>

    <bean id="deleteOldApplicationAlerts" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.notification.inapp.DeleteOldInAppNotificationsExecution">
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.db.notification.DeleteInAppNotificationsByDate" />
				</constructor-arg>
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.db.notification.GetUserIdsWithUnreadInAppNotificationsByDate" />
				</constructor-arg>
                <constructor-arg ref="getCachedUnreadInAppNotificationCountsByUserId_FORCE_REFRESH" />
                <!-- Age (in days) at which in-app notifications should be deleted. -->
                <constructor-arg type="int" value="14" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>
	
	<!-- ========== EMAIL ========== -->
	
	<bean id="sendEmailNotificationAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.notification.email.SendNotificationEmailExecution">
				<constructor-arg ref="emailerFactory" />
			</bean>
		</constructor-arg>	
        <constructor-arg value="true" />
    </bean>

	<!-- ========== CONTENT ========== -->

	<!-- ==== IN-APP ==== -->

	<util:map id="inAppNotifierMessageTemplates">
		<entry key="LIKE_ACTIVITY" value="$actor.displayName liked your #activityType($activity)." />
		<entry key="POST_TO_PERSONAL_STREAM" value="$actor.displayName posted a #activityType($activity) to your stream." />
		<entry key="COMMENT_TO_PERSONAL_STREAM" value="$actor.displayName commented on a #activityType($activity) in your stream." />
		<entry key="COMMENT_TO_PERSONAL_POST" value="$actor.displayName commented on your #activityType($activity) which now has $activity.commentCount comments." />
		<entry key="COMMENT_TO_COMMENTED_POST" value="$actor.displayName also commented on $activity.actor.displayName's #activityType($activity)." />
		<entry key="COMMENT_TO_SAVED_POST" value="$actor.displayName commented on $activity.actor.displayName's #activityType($activity) which you saved." />
		<entry key="FOLLOW_PERSON" value="$actor.displayName is following you." />
		<entry key="POST_TO_GROUP_STREAM" value="$actor.displayName posted a #activityType($activity) to the $stream.displayName stream." />
		<entry key="POST_TO_JOINED_GROUP" value="$actor.displayName posted a #activityType($activity) to the $stream.displayName stream." />
		<entry key="COMMENT_TO_GROUP_STREAM" value="$actor.displayName commented on a #activityType($activity) in the $stream.displayName stream." />
		<entry key="FOLLOW_GROUP" value="$actor.displayName joined the $stream.displayName group." />
		<entry key="FLAG_PERSONAL_ACTIVITY" value="$actor.displayName flagged a #activityType($activity) in $stream.displayName's stream." />
		<entry key="FLAG_GROUP_ACTIVITY" value="$actor.displayName flagged a #activityType($activity) in the $stream.displayName stream." />
		<entry key="REQUEST_NEW_GROUP" value="The $group.name group is pending approval." />
		<entry key="REQUEST_NEW_GROUP_APPROVED" value="Your request to create the $group.name group has been approved." />
		<entry key="REQUEST_NEW_GROUP_DENIED" value="Your request to create the $groupName group has been denied." />
		<entry key="REQUEST_GROUP_ACCESS" value="$actor.displayName requested to join the $group.displayName private group." />
		<entry key="REQUEST_GROUP_ACCESS_APPROVED" value="Your request to join the $group.displayName group has been approved." />
		<entry key="REQUEST_GROUP_ACCESS_DENIED" value="Your request to join the $group.displayName group has been denied." />
		<entry key="PASS_THROUGH" value="$message" />
	</util:map>

	<!-- ==== EMAIL ==== -->

	<bean id="emailTemplate" class="org.eurekastreams.server.action.execution.notification.notifier.EmailNotificationTemplate" abstract="true" />
	
	<util:map id="emailNotifierMessageTemplates">
		<entry key="LIKE_ACTIVITY">
			<bean parent="emailTemplate" 
				p:subject="$actor.displayName liked your #activityType($activity)"
				p:text-body="/org/eurekastreams/server/conf/templates/email/Notification-LIKE_ACTIVITY.txt"
				p:html-body="/org/eurekastreams/server/conf/templates/email/Notification-LIKE_ACTIVITY.html" />
		</entry>
	</util:map>
	
</beans>
