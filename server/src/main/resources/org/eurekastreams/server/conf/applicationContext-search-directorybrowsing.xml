<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!--
		*******************************************************************************

		Config for search-based directory browsing, requires
		applicationContext-search.xml.

		*******************************************************************************
	-->

	<!--
		Query Parser Builder to build thread-unsafe QueryParserser, using the
		Whitespace Analyzer as to only tokenize on whitespace. Using most of
		the other Analyzers will split on other characters such as numbers,
		which we don't want when looking up parent organization short names.
	-->
	<bean id="parentOrganizationShortNameQueryParserBuilder" class="org.eurekastreams.commons.search.QueryParserBuilder"
		scope="prototype">
		<constructor-arg value="parentOrganizationShortName" />
		<constructor-arg>
			<bean class="org.apache.lucene.analysis.WhitespaceAnalyzer" />
		</constructor-arg>
		<constructor-arg value="OR" />
	</bean>

	<bean id="luceneFieldBooster" class="org.eurekastreams.commons.search.LuceneFieldBooster"
		scope="prototype"></bean>

	<!--
		Parent bean for Search Request Builder.
	-->
	<bean id="parentOrgSearchRequestBuilderTemplate" abstract="true"
		class="org.eurekastreams.commons.search.ProjectionSearchRequestBuilder">
		<property name="resultTransformer" ref="cachedModelViewDirectoryResultTransformer" />
		<property name="queryParserBuilder"
			ref="parentOrganizationShortNameQueryParserBuilder" />
		<property name="advancedQueryParserBuilder"
			ref="parentOrganizationShortNameQueryParserBuilder" />
	</bean>


	<!--
		Search Request Builder - finding child organizations of a parent org
		short name
	-->
	<bean id="childOrganizationsSearchRequestBuilder" scope="prototype"
		parent="parentOrgSearchRequestBuilderTemplate">
		<property name="resultTypes" ref="searchResultTypesOrganization" />
	</bean>

	<!--
		Search Request Builder - finding people that report to an organization
		recursively, searching the hierarchy field for the id of the parent
		group
	-->
	<bean id="recursiveOrgEmployeesSearchRequestBuilder" scope="prototype"
		parent="parentOrgSearchRequestBuilderTemplate">
		<property name="resultTypes" ref="searchResultTypesPeople" />
	</bean>

	<!--
		Search Request Builder - finding domain groups that report to an
		organization recursively, searching the hierarchy field for the id of
		the parent group
	-->
	<bean id="recursiveOrgGroupsSearchRequestBuilder" scope="prototype"
		parent="parentOrgSearchRequestBuilderTemplate">
		<property name="resultTypes" ref="searchResultTypesGroups" />
	</bean>

	<!-- Strategy for finding an organization's id based on short name -->
	<bean id="orgIdGetter" class="org.eurekastreams.server.service.actions.strategies.directory.OrganizationIdGetter">	   
		<constructor-arg>
			<!-- Search Request Builder - finding root organization short name -->
			<bean scope="prototype" parent="parentOrgSearchRequestBuilderTemplate">
				<property name="searchStringFormat" value="shortName:(%1$s)" />
				<property name="resultFields">
					<list>
						<value>id</value>
					</list>
				</property>
				<property name="resultTypes" ref="searchResultTypesOrganization" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="bulkOrganizationsByShortNameMapper"/>
	</bean>

	<!--
		Field Booster not used - has no fields, so it'll throw an exception if
		someone passes a param in
	-->
	<bean id="directoryBrowsingFieldBooster" class="org.eurekastreams.commons.search.LuceneFieldBooster" />

	<!--
		Strategy to build a Lucene query for browsing the directory for
		Organizations.
	-->
	<bean id="directoryBrowsingLuceneQueryBuilderForOrgs"
		class="org.eurekastreams.server.service.actions.strategies.directory.DirectorySearchLuceneQueryBuilder">
		<constructor-arg
			value="parentOrganizationShortName:&quot;%1$s&quot; NOT shortName:&quot;%1$s&quot;" />
		<constructor-arg ref="directoryBrowsingFieldBooster" />
		<!-- Field booster value - not used -->
		<constructor-arg value="0" />
		<constructor-arg ref="orgIdGetter" />
	</bean>

	<!--
		Strategy to build a Lucene query for browsing the directory for
		People.
	-->
	<bean id="directoryBrowsingLuceneQueryBuilderForPeople"
		class="org.eurekastreams.server.service.actions.strategies.directory.DirectorySearchLuceneQueryBuilder">
		<!--
			No search mask needed - the recursive org component of the query will
			be added
		-->
		<constructor-arg value="" />
		<constructor-arg ref="directoryBrowsingFieldBooster" />
		<!-- Field booster value - not used -->
		<constructor-arg value="0" />
		<constructor-arg ref="orgIdGetter" />
	</bean>

	<!--
		Strategy to build a Lucene query for browsing the directory for
		DomainGroups.
	-->
	<bean id="directoryBrowsingLuceneQueryBuilderForGroups"
		class="org.eurekastreams.server.service.actions.strategies.directory.DirectorySearchLuceneQueryBuilder">
		<!--
			the recursive org component of the query will be added, as will user
			id info for follower/coordinator check if user is logged in
		-->
		<constructor-arg value="isPending:false" />
		<constructor-arg ref="directoryBrowsingFieldBooster" />
		<!-- Field booster value - not used -->
		<constructor-arg value="0" />
		<constructor-arg ref="orgIdGetter" />
	</bean>
	
</beans>
