<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
     http://www.springframework.org/schema/security 
     http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">
	
	<!-- Begin new entry point customization  --> 
       
    <http entry-point-ref="customPreAuthenticatedProcessingFilterEntryPoint">
    	<intercept-url pattern="/social/**" filters="none"/>
        <intercept-url pattern="/gadgets/**" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/resources/autocomplete/entities/**" access="ROLE_USER"/>
        <intercept-url pattern="/resources/atom/**" access="ROLE_USER"/>
        <intercept-url pattern="/resources/**" access="ROLE_OAUTH_CLIENT, ROLE_USER"/>
        <intercept-url pattern="/themes/**" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/rpc" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/rpc/**" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/eurekastreams/photos/**" access="ROLE_ANONYMOUS, ROLE_USER"/>
        <intercept-url pattern="/**" access="ROLE_USER"/>
        <anonymous/>
    </http>

    <beans:bean id="customPreAuthenticatedProcessingFilterEntryPoint" 
        class="org.eurekastreams.server.service.security.preauth.PreAuthenticationFilterEntryPoint"> 
		<beans:property name="exceptionMappings">
			<beans:props>
				<beans:prop key="org.springframework.security.InsufficientAuthenticationException">
					/login_disabled.html
				</beans:prop>
			</beans:props>
		</beans:property> 
		<beans:property name="useRelativeContext" value="false"/>
		<beans:property name="serverSideRedirect" value="true"/>               
    </beans:bean>    
         
    <!-- End new entry point customization -->  

	<beans:bean id="kerbFilter"
		class="org.eurekastreams.server.service.security.preauth.RequestAttributePreAuthenticatedProcessingFilter">
		<custom-filter position="PRE_AUTH_FILTER" />
		<beans:property name="principalRequestAttribute" value="REMOTE_USER" />
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="continueFilterChainOnUnsuccessfulAuthentication" value="true" />
	</beans:bean>

	<beans:bean id="persistentLoginRepository"
		class="org.eurekastreams.server.service.security.persistentlogin.PersistentLoginRepositoryImpl">
		<beans:constructor-arg>
			<beans:ref bean="jpaPersistentLoginMapper" />
		</beans:constructor-arg>
	</beans:bean>

	<beans:bean id="preauthAuthProvider"
		class="org.springframework.security.providers.preauth.PreAuthenticatedAuthenticationProvider">
		<custom-authentication-provider />
		<beans:property name="preAuthenticatedUserDetailsService">
			<beans:bean id="userDetailsServiceWrapper"
				class="org.springframework.security.userdetails.UserDetailsByNameServiceWrapper">
				<beans:property name="userDetailsService" ref="userDetailsService" />
			</beans:bean>
		</beans:property>
	</beans:bean>

	<beans:bean id="userDetailsService"
		class="org.eurekastreams.server.service.security.userdetails.UserDetailsServiceImpl">
		<beans:constructor-arg ref="jpaPersonMapper" />
		<beans:constructor-arg ref="persistentLoginRepository" />
		<beans:constructor-arg ref="authorityProvider" />
    </beans:bean>

	<beans:bean id="authorityProvider"
		class="org.eurekastreams.server.service.security.userdetails.AuthorityProviderImpl" />

	<authentication-manager alias="authenticationManager" />

</beans:beans>