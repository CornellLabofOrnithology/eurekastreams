<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd">

    <!--
        This spring file contains the configuration for the actions and their
        associated strategies.  This includes ServiceActions, TaskHandlerServiceActions,
        AsyncActions and TaskHandlerAsyncActions.  For information about the Action Framework
        please refer to the Action Framework Software Architecture documentation. 
        
        The actions in this file do not require the ServletContext to perform
        their actions. Servlet Context actions can be found in the
        applicationContext-servletcontextaware-framework-actions.xml file.
    --> 
    
    <!-- ************************* -->
    <!-- TaskHandler configuration -->
    <!-- ************************* -->
    
    <!-- A task action executor executing the action request in-method and in-thread.
-->
    <bean id="taskActionExecutor" class="org.eurekastreams.commons.task.TaskActionExecutor" />

    <!-- A threaded task action executor executing the action request in a single new thread.
-->
    <bean id="threadedTaskActionExecutor" class="org.eurekastreams.commons.task.ThreadedTaskActionExecutor">
            <constructor-arg ref="taskActionExecutor" />
    </bean>

    <!--  A null version of the task handler.  It does nothing.   -->
    <bean id="nullTaskHandler" class="org.eurekastreams.commons.task.NullTaskHandler" />

    <!-- This task handler executes the action inline. -->
    <bean id="inlineTaskHandler" class="org.eurekastreams.commons.task.InlineTaskHandler">
        <constructor-arg ref="threadedTaskActionExecutor" />
    </bean>
    
    <!-- ****************************** -->
    <!-- Action Framework configuration -->
    <!-- ****************************** -->
    
    <bean id="actionExecutorFactory"
        class="org.eurekastreams.commons.server.ActionExecutorFactory"/>
        
    <bean id="principalPopulator"
        class="org.eurekastreams.server.action.principal.SpringSecurityPrincipalPopulator" />
        
    <bean id="openSocialPrincipalPopulator" class="org.eurekastreams.server.action.principal.OpenSocialPrincipalPopulator">
        <constructor-arg ref="bulkPeopleByOpenSocialIdMapper" />
        <constructor-arg ref="bulkPeopleByAccountIdMapper" /> 
    </bean>
    
    <bean id="openSocialPrincipalPopulatorTransWrapper" class="org.eurekastreams.server.action.principal.PrincipalPopulatorTransWrapper">
        <constructor-arg ref="openSocialPrincipalPopulator" />
        <constructor-arg ref="transactionManager" /> 
    </bean>
    
    <bean id="serviceActionController" class="org.eurekastreams.commons.server.service.ServiceActionController">
        <constructor-arg ref="transactionManager"/>
    </bean>

    <bean id="asyncActionController" class="org.eurekastreams.commons.server.async.AsyncActionController">
        <constructor-arg ref="transactionManager"/>
    </bean>  
       
    <!-- ******************** -->
    <!-- Action configuration -->
    <!-- ******************** -->
    
    <bean id="updateNotificationsOnPersonNameChange" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.notification.UpdateNotificationsOnNameChangeExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.execution.notification.UpdateNotificationsOnPersonNameChangeRequestGenerator">
				        <constructor-arg ref="findByIdMapper" />        
				    </bean>
                </constructor-arg>
                <constructor-arg ref="updateNotificationsOnNameChangeMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>  
    
    <bean id="updateNotificationsOnGroupNameChange" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.notification.UpdateNotificationsOnNameChangeExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.execution.notification.UpdateNotificationsOnGroupNameChangeRequestGenerator">
                        <constructor-arg ref="findByIdMapper" />        
                    </bean>
                </constructor-arg>
                <constructor-arg ref="updateNotificationsOnNameChangeMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean> 
	
    <bean id="authorizeUpdateGroup" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <!-- Validation -->
        <constructor-arg ref="noValidationStrategy" />
        <!-- Authorization -->
        <constructor-arg>            
            <bean class="org.eurekastreams.server.action.authorization.CurrentUserGroupCoordinatorRecursivelyAuthorization">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.request.transformer.EntityIdFromUniqueStringKeyParameter">
                        <constructor-arg ref="bulkDomainGroupsByShortNameMapper"/>
                        <property name="returnValueAsString" value="true" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess"/>
            </bean>
        </constructor-arg>
        <!-- Execution -->
        <constructor-arg ref="noExecutionStrategy" />
        <constructor-arg value="true" />
    </bean>
    
    <bean id="authorizeUpdateOrganization" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <!-- Validation -->
        <constructor-arg ref="noValidationStrategy" />
        <!-- Authorization -->
        <constructor-arg>            
            <bean class="org.eurekastreams.server.action.authorization.CurrentUserOrgCoordinatorRecursivelyAuthorization">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.request.transformer.EntityIdFromUniqueStringKeyParameter">
                        <constructor-arg ref="bulkOrganizationsByShortNameMapper"/>
                        <property name="returnValueAsString" value="true" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="getRecursiveOrgCoordinators"/>
            </bean> 
        </constructor-arg>
        <!-- Execution -->
        <constructor-arg ref="noExecutionStrategy" />
        <constructor-arg value="true" />
    </bean>
    
    <bean id="updateMembershipTaskHandler" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Validation -->
        <constructor-arg ref="noValidationStrategy" />
        <!-- Authorization -->
        <constructor-arg ref="currentUserRootOrgCoordinatorAuthorization" />
        <!-- Execution -->
        <constructor-arg> 
            <bean class="org.eurekastreams.server.action.execution.QueueAsynchActionExecution">
                <constructor-arg value="clientInvokedRefreshMembershipAction" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="true" />
    </bean>
    
    <!-- Similar to refreshMembershipAction, but hooked up to client button and to allows for different "refresh" functionality
    than the quartz job, which invokes refreshMembershipAction-->
    <bean id="clientInvokedRefreshMembershipAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />        
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.settings.RefreshPeopleExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.execution.settings.PersonSourceLDAP">
                        <constructor-arg ref="findSystemSettings" />
                        <constructor-arg ref="ldapPersonLookupViaLdapGroupMembership" />
                        <constructor-arg ref="ldapPersonLookupViaAttributeQuery" />
                    </bean>
                </constructor-arg>
                <constructor-arg value="createPersonAction"/>
                <!-- NOTE: Set value below to "setPersonLockedStatusAction" or "" to enable/disable locking/unlocking  -->  
                <constructor-arg value="setPersonLockedStatusAction"/>          
                <constructor-arg ref="getPersonIdsByLockedStatus"/>
                <constructor-arg ref="getRootOrganizationIdAndShortNameMapper"/>  
                <constructor-arg ref="findSystemSettings" />              
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="true" />        
    </bean>
    
    <bean id="refreshMembershipAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />        
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.settings.RefreshPeopleExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.execution.settings.PersonSourceLDAP">
                        <constructor-arg ref="findSystemSettings" />
                        <constructor-arg ref="ldapPersonLookupViaLdapGroupMembership" />
                        <constructor-arg ref="ldapPersonLookupViaAttributeQuery" />
                    </bean>
                </constructor-arg>
                <constructor-arg value="createPersonAction"/>
                <!-- NOTE: Set value below to "setPersonLockedStatusAction" or "" to enable/disable locking/unlocking  -->  
                <constructor-arg value=""/>          
                <constructor-arg ref="getPersonIdsByLockedStatus"/>
                <constructor-arg ref="getRootOrganizationIdAndShortNameMapper"/>  
                <constructor-arg ref="findSystemSettings" />              
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="true" />        
    </bean>    
    
    <bean id="createPersonAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />        
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.settings.CreatePersonExecution">
                <constructor-arg ref="createPersonActionFactory" />
                <constructor-arg ref="jpaPersonMapper" />
                <!-- email action ref -->
                <constructor-arg value="sendWelcomeEmail"/> 
                <constructor-arg ref="getOrganizationProxyById"/>            
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />        
    </bean>
    
    <bean id="setPersonLockedStatusAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />        
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.settings.SetPersonLockedStatusExecution">
                <constructor-arg ref="setPersonLockedStatus" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />        
    </bean>
    
	<bean id="deleteGroupExecution" class="org.eurekastreams.server.action.execution.profile.DeleteGroupFromDBExecution">
		<constructor-arg ref="deleteGroupActivity" />
		<constructor-arg ref="removeGroupFollowers" />
		<constructor-arg ref="deleteGroup" />
		<constructor-arg ref="deleteGroupSubscriptions" />                
		<constructor-arg value="10000" />                  
	</bean>
	
    <bean id="deleteGroupAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.profile.DeleteGroupValidation">
                <constructor-arg ref="findByIdMapper" />                            
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.CurrentUserGroupCoordinatorRecursivelyAuthorization">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.request.transformer.ToStringTransformer" />
                </constructor-arg>
                <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess"/>
            </bean>        
        </constructor-arg>            
        <constructor-arg ref="deleteGroupExecution" />
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />        
    </bean> 
    
    <bean id="deleteCacheKeysAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.DeleteCacheKeysExecution">
                <constructor-arg ref="deleteCacheKeys" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>    
    
    <bean id="deleteFromSearchIndexAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.DeleteFromSearchIndexExecution">
                <constructor-arg ref="deleteFromSearchIndex" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>    
	
    <bean id="increaseOrgEmployeeCountAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.IncreaseOrgEmployeeCountExecution">
                <constructor-arg ref="increaseOrgEmployeeCount" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>
    
   	<bean id="sendWelcomeEmail" class="org.eurekastreams.commons.actions.async.AsyncAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.SendWelcomeEmailExecution">
					<constructor-arg ref="emailerFactory" />
					<constructor-arg type="java.lang.String" value="${eureka.web.baseurl}" />
					<constructor-arg type="java.lang.String" value="Welcome to Eureka Streams" />
					<constructor-arg type="java.lang.String" value="Congratulations! You have just been given access to Eureka Streams. Eureka streams enables knowledge workers to make informed, timely decisions by finding relevant colleagues and groups, following their stream of activity, and engaging in conversation.&lt;br/&gt;&lt;a href='$(url)'&gt;Set up your profile&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;Thank you,&lt;br/&gt;Eureka Product Team" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="passThruRequestTransformer" class="org.eurekastreams.server.action.request.transformer.PassThruRequestTransformer"/>
	
	<bean id="deleteEmployment" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
             <bean
                class="org.eurekastreams.server.action.authorization.profile.ModifyEmploymentAuthorizationStrategy">
                <constructor-arg ref="jpaJobMapper" />
                <constructor-arg ref="passThruRequestTransformer" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.profile.DeleteEmploymentExecution">
                <constructor-arg ref="jpaJobMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>
    
    <bean id="deleteEducation" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
             <bean
                class="org.eurekastreams.server.action.authorization.profile.ModifyEducationAuthorizationStrategy">
                <constructor-arg ref="jpaEnrollmentMapper" />
                <constructor-arg ref="passThruRequestTransformer" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.profile.DeleteEducationExecution">
                <constructor-arg ref="jpaEnrollmentMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

	<bean id="getEducation" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.validation.profile.GetProfileInformationValidation">
				<constructor-arg ref="findByIdMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.profile.GetEducationExecution">
				<constructor-arg ref="jpaEnrollmentMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getEmployment" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.validation.profile.GetProfileInformationValidation">
				<constructor-arg ref="findByIdMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.profile.GetEmploymentExecution">
				<constructor-arg ref="jpaJobMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
        
	<bean id="addMembershipCriteria" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="currentUserRootOrgCoordinatorAuthorization" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.settings.AddMembershipCriteriaExecution">
				<constructor-arg ref="findSystemSettingsFromDatabase" />
				<constructor-arg ref="updaterStrategy" />
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper">
						<!-- Wrapped updater to clear the SystemSettings cache -->
						<constructor-arg ref="deleteSystemSettingsCacheMapper" />
					</bean>
				</constructor-arg>
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="removeMembershipCriteria" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="currentUserRootOrgCoordinatorAuthorization" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.settings.RemoveMembershipCriteriaExecution">
				<constructor-arg ref="findSystemSettingsFromDatabase" />
				<constructor-arg ref="updaterStrategy" />
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper">
						<!-- Wrapped updater to clear the SystemSettings cache -->
						<constructor-arg ref="deleteSystemSettingsCacheMapper" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>
		
    <bean id="postActivityCommentAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.authorization.stream.ActivityAuthorizationStrategy">
                <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
                <constructor-arg ref="getGroupFollowerIds" />
                <constructor-arg ref="personActorStrategy" />
                <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.service.actions.strategies.activity.ActivityDTOFromParamsStrategyByCommentDTO">
                        <constructor-arg ref="bulkActivitiesMapper"/>
                    </bean>
                </constructor-arg>
                <constructor-arg value="COMMENT" />
                <constructor-arg ref="bulkPeopleByAccountIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.PostActivityCommentExecution">
                    <constructor-arg ref="insertActivityComment" />
                    <constructor-arg ref="bulkActivitiesMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean> 
    
    <bean id="deleteComment" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.stream.CommentModificationAuthorization">
                <constructor-arg ref="getCommentsById" />
                <constructor-arg ref="bulkActivitiesMapper" />
                <constructor-arg ref="commentDeletePropertyStrategy" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.DeleteActivityCommentExecution">
                <constructor-arg ref="deleteActivityComment" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>  
    
    <bean id="deleteActivityAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.stream.DeleteActivityAuthorization">
                <constructor-arg ref="bulkActivitiesMapper" />
                <constructor-arg ref="activityDeletePropertyStrategy" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.DeleteActivityExecution">
                <constructor-arg ref="deleteActivity" />
                <constructor-arg ref="getOrderedCommentIdsByActivityId" />
                <constructor-arg ref="getPersonIdsWithStarredActivity" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>    
           
	<bean id="renameTab" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
		    <bean class="org.eurekastreams.server.action.validation.start.RenameTabValidation"/>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.authorization.start.RenameTabAuthorization">
				<constructor-arg ref="tabPermission" />
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.start.RenameTabExecution">
				<constructor-arg ref="jpaTabMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="undeleteTab" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.start.UndeleteTabExecution">
				<constructor-arg ref="jpaPortalPageMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="reorderGadget" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
		    <bean class="org.eurekastreams.server.action.validation.start.ReorderGadgetValidation">
		      <constructor-arg ref="jpaTabMapper" />
		    </bean>
		</constructor-arg>
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.start.ReorderGadgetExecution">
				<constructor-arg ref="jpaTabMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="deleteActivityCacheUpdate" class="org.eurekastreams.commons.actions.async.AsyncAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.DeleteActivityCacheUpdateExecution">
				<constructor-arg ref="deleteActivityCacheUpdateDAO" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="deleteExpiredActivities" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.DeleteExpiredActivitiesExecution">
				<constructor-arg ref="findSystemSettings" />
				<constructor-arg ref="getExpiredActivities" />
				<!-- Chunk size for breaking expired activities into smaller pieces for processing
-->
				<constructor-arg type="int" value="1000" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
		<constructor-arg ref="taskHandler" />
	</bean>
    
    <bean id="deleteExpiredActivitiesOnDemand" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="currentUserRootOrgCoordinatorAuthorization" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.DeleteExpiredActivitiesExecution">
                <constructor-arg ref="findSystemSettings" />
                <constructor-arg ref="getExpiredActivities" />
                <!-- Chunk size for breaking expired activities into smaller pieces for processing
-->
                <constructor-arg type="int" value="1000" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>
    
    <bean id="deleteActivitiesByIds" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.DeleteActivitiesByIdsExecution">
                <constructor-arg ref="getListsContainingActivities" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.DeleteActivities"/>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>
    
    <!-- This bean is used by ActivityServiceImpl -->
    <bean id="deleteUserActivities" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.stream.DeleteUserActivityValidation">
                <constructor-arg ref="bulkActivitiesMapper" />                            
            </bean>
        </constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.DeleteActivitiesByIdsExecution">
                <constructor-arg ref="getListsContainingActivities" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.DeleteActivities"/>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>
    
	<bean id="deleteIdsFromLists" class="org.eurekastreams.commons.actions.async.AsyncAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.DeleteIdsFromListsExecution">
				<constructor-arg ref="removeIdsFromLists" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	<bean id="updateSystemSettings" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.validation.settings.UpdateSystemSettingsValidation">
				<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="currentUserRootOrgCoordinatorAuthorization" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.settings.UpdateSystemSettingsExecution">
				<constructor-arg ref="findSystemSettingsFromDatabase" />
				<constructor-arg ref="updaterStrategy" />
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper">
						<!-- Wrapped updater to clear the SystemSettings cache -->
						<constructor-arg ref="deleteSystemSettingsCacheMapper" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="deleteAppData" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.DeleteAppDataExecution">
				<constructor-arg ref="jpaAppDataMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="updateCachedOrganizationNameAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.profile.UpdateCachedOrganizationNameExecution">
				<constructor-arg ref="updateCachedOrganizationNameMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="updateGadgetUserPrefById" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.validation.start.UpdateGadgetUserPrefByIdValidation" />
		</constructor-arg>
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.start.UpdateGadgetUserPrefByIdExecution">
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper" />
				</constructor-arg>
				<constructor-arg ref="findByIdMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="getPersonNoContext" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.GetPersonExecution">
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="populatePeopleWithSkeletonRelatedOrgsCacheMapper" />
				<constructor-arg>
					<null />
				</constructor-arg>
				<constructor-arg ref="populateOrgChildWithSkeletonParentOrgsCacheMapper" />
				<constructor-arg>
				    <bean class="org.eurekastreams.server.action.execution.GetBannerIdByParentOrganizationStrategy">
				        <constructor-arg ref="bulkOrganizationsMapper" />
				        <constructor-arg ref="getRecursiveParentOrgIdsMapper" />
				        <constructor-arg ref="findByIdMapper" />
				        <constructor-arg value="Person" />
				    </bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
    <bean id="domainGroupCacheUpdaterAsyncAction"
        class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.DomainGroupCacheUpdaterAsyncExecution">
                <constructor-arg ref="saveDomainGroupCoordinatorsListToCacheMapper" />
                <constructor-arg ref="jpaGroupMapper" />
                <constructor-arg ref="addPrivateGroupIdToCachedCoordinatorAccessList" />
                <constructor-arg ref="memcachedCache" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>
    
    <bean id="activityRecipientDomainGroupNameUpdaterAsyncAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
    	<!-- Async action to update the recipient scope name of every activity posted to a domain group
-->
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.ActivityRecipientStreamNameCacheUpdateAsyncExecution">
            	<!-- stream scope type -->
            	<constructor-arg value="GROUP" />
            	
            	<!-- mapper to get the domain name -->
            	<constructor-arg>
            		<bean class="org.eurekastreams.server.persistence.mappers.db.GetFieldFromTableByUniqueField">
            			<constructor-arg value="DomainGroup" />
            			<constructor-arg value="shortName" />
            			<constructor-arg value="name" />
            		</bean>
            	</constructor-arg>
            	
            	<!-- mapper to get ids of activities to update -->
                <constructor-arg>
                	<bean class="org.eurekastreams.server.persistence.mappers.db.GetActivityIdsPostedToStreamByUniqueKeyAndScopeType" />
                </constructor-arg>
                
                <!-- cache updater -->
                <constructor-arg>
                	<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateDestinationStreamNameInCachedActivity">
                		<!-- batch size for cache gets -->
                		<constructor-arg value="100" />
                		<property name="cache" ref="memcachedCache" />
                	</bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>	
    
    <bean id="activityRecipientPersonNameUpdaterAsyncAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
    	<!-- Async action to update the recipient scope name of every activity posted to a person's stream
-->
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.ActivityRecipientStreamNameCacheUpdateAsyncExecution">
            	<!-- stream scope type -->
            	<constructor-arg value="PERSON" />
            	
            	<!-- mapper to get the person name -->
            	<constructor-arg>
            		<bean class="org.eurekastreams.server.persistence.mappers.db.GetFieldFromTableByUniqueField">
            			<constructor-arg value="Person" />
            			<constructor-arg value="accountId" />
            			<constructor-arg value="displayName" />
            		</bean>
            	</constructor-arg>
            	
            	<!-- mapper to get ids of activities to update -->
                <constructor-arg>
                	<bean class="org.eurekastreams.server.persistence.mappers.db.GetActivityIdsPostedToStreamByUniqueKeyAndScopeType" />
                </constructor-arg>
                
                <!-- cache updater -->
                <constructor-arg>
                	<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateDestinationStreamNameInCachedActivity">
                		<!-- batch size for cache gets -->
                		<constructor-arg value="100" />
                		<property name="cache" ref="memcachedCache" />
                	</bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>	
    
    
	<bean id="deleteThemeAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="galleryAuthorizer" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.gallery.DeleteGalleryItemExecution">
				<constructor-arg ref="jpaThemeMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="deleteGadgetDefinitionAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="galleryAuthorizer" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.gallery.DeleteGalleryItemExecution">
				<constructor-arg ref="jpaGadgetDefinitionMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>
	
	   <bean id="deletePluginDefinitionAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="galleryAuthorizer" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.gallery.DeleteGalleryItemExecution">
                <constructor-arg ref="jpaPluginDefinitionMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

	<bean id="galleryAuthorizer"
		class="org.eurekastreams.server.action.authorization.gallery.GalleryModificationAuthorization">
		<constructor-arg ref="isOrganizationCoordinatorForAnyOrg" />
	</bean>

	<bean id="isOrganizationCoordinatorForAnyOrg"
		class="org.eurekastreams.server.action.authorization.IsOrganizationCoordinatorForAnyOrg">
		<constructor-arg>
			<ref bean="getRecursiveOrgCoordinatorsDownTree" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="getRootOrganizationIdAndShortNameMapper" />
		</constructor-arg>
	</bean>

	<bean id="updateAppData" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.UpdateAppDataExecution">
				<constructor-arg ref="jpaAppDataMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="getOrganization" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.GetOrganizationExecution">
				<constructor-arg ref="jpaOrganizationMapper" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.execution.GetBannerIdByParentOrganizationStrategy">
                        <constructor-arg ref="bulkOrganizationsMapper" />
                        <constructor-arg ref="getRecursiveParentOrgIdsMapper" />
                        <constructor-arg ref="findByIdMapper" />
                        <constructor-arg value="Organization" />
                    </bean>
                </constructor-arg>
				<property name="organizationLoader">
					<bean
						class="org.eurekastreams.server.service.actions.strategies.OrganizationPersonLoaderCoordinators">
						<constructor-arg ref="getOrgCoordinators" />
						<constructor-arg ref="bulkPeopleMapper" />
						<property name="organizationLoader">
							<bean
								class="org.eurekastreams.server.service.actions.strategies.OrganizationPersonLoaderLeaders">
								<constructor-arg ref="bulkPeopleMapper" />
								<constructor-arg ref="getOrganizationLeaderIdsByOrgId" />
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getGroup" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.GetGroupExecution">
				<constructor-arg ref="jpaGroupMapper" />
				<constructor-arg ref="populateOrgChildWithSkeletonParentOrgsCacheMapper" />
				<constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.execution.GetBannerIdByParentOrganizationStrategy">
                        <constructor-arg ref="bulkOrganizationsMapper" />
                        <constructor-arg ref="getRecursiveParentOrgIdsMapper" />
                        <constructor-arg ref="findByIdMapper" />
                        <constructor-arg value="DomainGroup" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="getGroupFollowerIds" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="addGadget" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="addGadgetAuthorization" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.start.AddGadgetExecution">
				<constructor-arg ref="jpaTabMapper" />
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="jpaGadgetDefinitionMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="addGadgetAuthorization"
		class="org.eurekastreams.server.action.authorization.start.AddGadgetAuthorization">
		<constructor-arg ref="jpaTabMapper" />
		<constructor-arg ref="tabPermission" />
		<constructor-arg ref="jpaPersonMapper" />
	</bean>

	<bean id="addTab" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
    		<bean
                class="org.eurekastreams.server.action.validation.start.AddTabValidation">
                <constructor-arg ref="findByIdMapper" />
            </bean>
		</constructor-arg>
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.start.AddTabExecution">
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="jpaTabMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getCompleteStreamView" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.GetCompleteStreamViewByIdExecution">
				<constructor-arg ref="findByIdMapper" />
				<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
				<constructor-arg ref="bulkPeopleByAccountIdMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="updateBiography" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.profile.UpdateBiographyExecution">
				<constructor-arg>
					<ref bean="jpaPersonMapper" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="persistEducation" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.validation.profile.PersistEducationValidation">
				<constructor-arg ref="findByIdMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.authorization.profile.PersistEducationAuthorizationStrategy">
				<constructor-arg ref="findByIdMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.profile.PersistEducationExecution">
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="findByIdMapper" />
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
				</constructor-arg>
				<constructor-arg ref="indexEntity" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="persistEmployment" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.validation.profile.PersistEmploymentValidation">
				<constructor-arg ref="findByIdMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.authorization.profile.PersistEmploymentAuthorizationStrategy">
				<constructor-arg ref="findByIdMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.profile.PersistEmploymentExecution">
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="findByIdMapper" />
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
				</constructor-arg>
				<constructor-arg ref="indexEntity" />				
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="insertOptOutVideo" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.validation.SetOptOutVideoValidation">
				<constructor-arg ref="findByIdMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.SetOptOutVideoExecution">
				<constructor-arg ref="jpaPersonMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="getTutorialVideo" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.GetTutorialVideoExecution">
				<constructor-arg ref="getTutorialVideos" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getFollowingGroups" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.profile.GetFollowingExecution">
				<constructor-arg ref="bulkPeopleByAccountIdMapper" />
				<constructor-arg ref="getFollowedGroupIds" />
				<constructor-arg ref="bulkDomainGroupsMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getFollowing" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.profile.GetFollowingExecution">
				<constructor-arg ref="bulkPeopleByAccountIdMapper" />
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.ExcludeSelfMapperDecorator">
						<constructor-arg ref="getFollowedPersonIds" />
					</bean>
				</constructor-arg>
				<constructor-arg ref="bulkPeopleMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	<bean id="getPersonFollowers" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.authorization.profile.GetFollowersAuthorizationStrategy">
				<constructor-arg ref="getCoordinatorIdsByGroupId" />
				<constructor-arg ref="getGroupFollowerIds" />
				<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
				<constructor-arg ref="getRecursiveOrgCoordinators"/>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.profile.GetFollowingExecution">
				<constructor-arg ref="bulkPeopleByAccountIdMapper" />
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.ExcludeSelfMapperDecorator">
						<constructor-arg ref="getFollowerIds" />
					</bean>
				</constructor-arg>
				<constructor-arg ref="bulkPeopleMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getGroupFollowers" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.authorization.profile.GetFollowersAuthorizationStrategy">
				<constructor-arg ref="getCoordinatorIdsByGroupId" />
				<constructor-arg ref="getGroupFollowerIds" />
				<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
				<constructor-arg ref="getRecursiveOrgCoordinators"/>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.profile.GetFollowingExecution">
				<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
				<constructor-arg ref="getGroupFollowerIds" />
				<constructor-arg ref="bulkPeopleMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	<bean id="getCurrentUserFollowingStatus" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.profile.GetCurrentUserFollowingStatusExecution">
				<constructor-arg ref="bulkPeopleByOpenSocialIdMapper" />
				<constructor-arg ref="openSocialRegEx" />
				<constructor-arg ref="getGroupFollowerIds" />
				<constructor-arg ref="getFollowerIds" />
				<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
				<constructor-arg ref="bulkPeopleByAccountIdMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getTermsOfService" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.GetTermsOfServiceExecution">
				<constructor-arg ref="findSystemSettings" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getSystemSettings" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.GetSystemSettingsExecution">
				<constructor-arg ref="findSystemSettings" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="acceptTermsOfService" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.AcceptTermsOfServiceExecution">
				<constructor-arg ref="jpaPersonMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="getOrganizationTree" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.GetOrganizationTreeExecution">
				<constructor-arg ref="getOrganizationTreeDTOMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
    <bean id="feedFactory" class="org.eurekastreams.server.service.actions.strategies.activity.plugins.rome.FeedFactory">
        <constructor-arg>
            <list>
                <ref bean="twitterCookieBypassStrategy"/>
            </list>
        </constructor-arg>
        <constructor-arg value="${eureka.proxy.host}" />
        <constructor-arg value="${eureka.proxy.port}" />
        <constructor-arg type="int" value="${eureka.feeds.httptimeout}" />            
    </bean>	
	
    <bean id="getFeedTitle" class="org.eurekastreams.server.action.execution.feed.GetTitleFromFeedExecution">
        <constructor-arg ref="feedFactory" />                
    </bean>	

    <bean id="insertBufferedActivitiesAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.InsertBufferedActivitiesExecution">
                <constructor-arg ref="addBufferedActivitiesToCache" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean> 

    <bean id="refreshFeedsAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.RefreshFeedsExecution">
	            <constructor-arg ref="getRefreshableFeedsMapper" />
	            <constructor-arg ref="setRefreshableFeedsAsPendingMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
         <constructor-arg ref="taskHandler" />
    </bean>    
    
    <!-- TODO  these next 4 keys couldn't be staged in the ac-mappers.xml for some reason?
-->
    <!-- Standard RSS/ATOM mappers -->
    <bean id="standardFeedBookmarkMapper"
        class="org.eurekastreams.server.service.actions.strategies.activity.plugins.StandardFeedBookmarkMapper" />
    
    <bean id="standardFeedNoteMapper"
        class="org.eurekastreams.server.service.actions.strategies.activity.plugins.StandardFeedNoteMapper" />
    
    <!-- specific URL mappers -->   
    <bean id="flickrMapper"
        class="org.eurekastreams.server.service.actions.strategies.activity.plugins.FlickrMapper" />

    <bean id="youtubeMapper"
        class="org.eurekastreams.server.service.actions.strategies.activity.plugins.YoutubeMapper" />

    
    <bean id="refreshFeedAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.RefreshFeedExecution">
		        <constructor-arg>
		            <map>
		                <entry key="NOTE" value-ref="standardFeedNoteMapper" />
		                <entry key="BOOKMARK" value-ref="standardFeedBookmarkMapper" />
		            </map>
		        </constructor-arg>
		        <constructor-arg>
		            <list>
		                <bean
		                    class="org.eurekastreams.server.service.actions.strategies.activity.plugins.SpecificUrlObjectMapper">
		                    <property name="regex" value="(www.)?youtube.com" />
		                    <property name="objectMapper" ref="youtubeMapper" />
		                </bean>
		                <bean
		                    class="org.eurekastreams.server.service.actions.strategies.activity.plugins.SpecificUrlObjectMapper">
		                    <property name="regex" value="(www.)?flickr.com" />
		                    <property name="objectMapper" ref="flickrMapper" />
		                </bean>
		            </list>
		        </constructor-arg>
		        <constructor-arg>
		            <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
		        </constructor-arg>
		        <constructor-arg ref="memcachedCache" />
		        <constructor-arg ref="feedFactory"/>
		        <constructor-arg ref="findByIdMapper" />
		        <constructor-arg ref="findByIdMapper" />
		        <constructor-arg ref="findByIdMapper" />
		        <constructor-arg>
		                <ref bean="gadgetMetaDataHttpFetcher" />
		        </constructor-arg>
		        <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper" />
                </constructor-arg>
	        </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="twitterCookieBypassStrategy" class="org.eurekastreams.server.service.actions.strategies.activity.plugins.rome.HttpCookieBypassStrategy">
        <constructor-arg value="(www.)?twitter.com"/>
        <constructor-arg value="lmyellow="/>
    </bean>        

    <bean id="getPersonIdForFeedSub" class="org.eurekastreams.server.service.actions.strategies.activity.plugins.GetPersonIdForFeedSubscription">
        <constructor-arg ref="bulkPeopleByAccountIdMapper" /> 
    </bean>   
    
    <bean id="deletePluginForUser" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.DeleteFeedSubscriberExecution">
                <constructor-arg ref="deleteByIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>   

    <bean id="persistPluginForUser" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.AddFeedToEntityExecution">
		        <constructor-arg>
		            <bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper" />
		        </constructor-arg>
		        <constructor-arg ref="getFeedByUrlOrCreateMapper" />
		        <constructor-arg ref="getPersonIdForFeedSub" />
		        <constructor-arg ref="getFeedSubscriberOrCreateMapper" />
		        <constructor-arg ref="getFeedTitle" />
		        <constructor-arg ref="deletePluginForUser" />
		        <constructor-arg value="PERSON" />
		        <constructor-arg ref="postPersonActivityExecutionStrategy" />        
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>   
    
    <bean id="deletePluginForGroup" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.DeleteFeedSubscriberExecution">
                <constructor-arg ref="deleteByIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>   
    
    <bean id="getGroupIdForFeedSub" class="org.eurekastreams.server.service.actions.strategies.activity.plugins.GetGroupIdForFeedSubscription">
        <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
    </bean>   
    
    <bean id="getFeedTitleAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg ref="getFeedTitle" />
        <constructor-arg value="true" />
    </bean>   
    
    <bean id="persistPluginForGroup" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.AddFeedToEntityExecution">
		        <constructor-arg>
		            <bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper" />
		        </constructor-arg>
		        <constructor-arg ref="getFeedByUrlOrCreateMapper" />
		        <constructor-arg ref="getGroupIdForFeedSub" />
		        <constructor-arg ref="getFeedSubscriberOrCreateMapper" />
		        <constructor-arg ref="getFeedTitle" />
		        <constructor-arg ref="deletePluginForGroup" />
		        <constructor-arg value="GROUP" />
		        <constructor-arg ref="postGroupActivityExecutionStrategy" />		        
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>   
    
    <bean id="getPluginsAndSubscriptionsForUser" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.GetPluginsAndSubscriptionsForTabExecution">
			        <constructor-arg ref="getAllPluginsMapper" />
			        <constructor-arg ref="getFeedSubscriptionsByEntity" />
			        <constructor-arg ref="getPersonIdForFeedSub" />
			        <constructor-arg value="PERSON" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>   
    
    <bean id="getPluginsAndSubscriptionsForGroup" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.GetPluginsAndSubscriptionsForTabExecution">
                    <constructor-arg ref="getAllPluginsMapper" />
                    <constructor-arg ref="getFeedSubscriptionsByEntity" />
                    <constructor-arg ref="getGroupIdForFeedSub" />
                    <constructor-arg value="GROUP" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>   
    
	<bean id="getOrganizationById" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.GetOrganizationByIdExecution">
				<constructor-arg ref="bulkOrganizationsMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getPersonModelView" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.GetPersonModelViewExecution">
				<constructor-arg ref="getRecursiveOrgCoordinatorsDownTree" />
				<constructor-arg ref="getRecursiveOrgCoordinators" />
				<constructor-arg ref="getRootOrganizationIdAndShortNameMapper" />
				<constructor-arg ref="bulkPeopleByAccountIdMapper" />
				<constructor-arg>
    				<bean class="org.eurekastreams.server.service.security.userdetails.TermsOfServiceAcceptanceStrategyImpl">
		    			<constructor-arg ref="findSystemSettings"/>
		    		</bean>
    			</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="personLookup" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.PersonLookupExecution">
				<constructor-arg>
					<bean
						class="org.eurekastreams.server.action.execution.PersonLookupUtilityStrategy">
						<constructor-arg ref="personLookupStrategy" />
						<constructor-arg
							ref="populateOrgChildWithSkeletonParentOrgsCacheMapper" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	<bean id="groupLookup" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.VerifyLdapGroupExecution">
				<constructor-arg ref="findLdapGroupByCnNameMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="personLookupOrg" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.PersonLookupExecution">
				<constructor-arg>
					<bean
						class="org.eurekastreams.server.action.execution.PersonLookupUtilityStrategy">
						<constructor-arg ref="ldapPersonLookupViaAttributeQuery" />
						<constructor-arg
							ref="populateOrgChildWithSkeletonParentOrgsCacheMapper" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="personLookupOrgGroup" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.PersonLookupExecution">
				<constructor-arg>
					<bean
						class="org.eurekastreams.server.action.execution.PersonLookupUtilityStrategy">
						<constructor-arg ref="ldapPersonLookupViaLdapGroupMembership" />
						<constructor-arg
							ref="populateOrgChildWithSkeletonParentOrgsCacheMapper" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getPersonalSettings" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.settings.GetPersonalSettingsExecution">
				<constructor-arg>
					<util:list>
						<bean
							class="org.eurekastreams.server.action.execution.settings.NotificationFilterPreferencesRetriever">
							<constructor-arg ref="notifierIdToDisplayMap" />
							<constructor-arg ref="getNotificationFilterPreferencesByPersonId" />
						</bean>
					</util:list>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

    <bean id="getActivitesByCompositeStreamExecutor"
                class="org.eurekastreams.server.action.execution.stream.GetActivitiesByCompositeStreamExecution">
                <constructor-arg ref="compositeStreamActivityIdsMapper" />
                <constructor-arg ref="bulkActivitiesMapper" />
                <constructor-arg>
                    <list>
                        <ref bean="canCommentFilter" />
                        <ref bean="canShareFilter" />
            	        <ref bean="likeFilter" />
        	            <ref bean="deleteFilter" />
    	                <ref bean="savedFilter" />
	                    <ref bean="serverTimeFilter" />
                    </list>
                </constructor-arg>
                <constructor-arg
                    ref="getPrivateCoordinatedAndFollowedGroupIdsForUserMapper" />
                <!--
                    Multiplier for batch size when requesting ActivityDTOs from cache.
                    If the user wants 10 activities in a page, and this value is 2.0,
                    then the first batch will request 20, the second 40, third 80.
                -->
                <constructor-arg type="float" value="2.0" />
                <constructor-arg ref="bulkPeopleByAccountIdMapper" />
    </bean>

    <bean id="securityTrimmer" 
    		class="org.eurekastreams.server.action.execution.stream.ActivitySecurityTrimmer">
            <constructor-arg ref="bulkActivitySecurityMapper" />
    		<constructor-arg
                    ref="getPrivateCoordinatedAndFollowedGroupIdsForUserMapper" />
	</bean>
	    
    <bean id="getActivitiesByRequestExecutor" 
    		class="org.eurekastreams.server.action.execution.stream.GetActivitiesByRequestExecution">
            <constructor-arg>
				<bean
					class="org.eurekastreams.server.service.actions.strategies.activity.datasources.PersistenceDataSource">
					<constructor-arg ref="getEveryoneActivity" />
		            <constructor-arg>
						<map>
							<entry key="followedBy">
								<ref bean="getFollowedByActivities" />
							</entry>
							<entry key="recipient">
								<ref bean="bulkActivityStreamsMapper" />
							</entry>
							<entry key="organization">
								<ref bean="parentOrgActivityIdMapper" />
							</entry>							
							<entry key="savedBy">
								<ref bean="getStarredActivityIds" />
							</entry>							
							<entry key="parentOrg">
								<ref bean="parentOrgActivityIdMapper" />
							</entry>							
						</map>
		            </constructor-arg>
		             <constructor-arg>
                        <map>
                            <entry key="followedBy">
                                <bean 
                                    class="org.eurekastreams.server.service.actions.strategies.activity.datasources.FollowedByPersistenceRequestTransformer">
                                    <constructor-arg ref="bulkPeopleByAccountIdMapper" />   
                                </bean>
                            </entry>
                            <entry key="recipient">
                                <bean 
                                    class="org.eurekastreams.server.service.actions.strategies.activity.datasources.RecipientPersistenceRequestTransformer">
                                    <constructor-arg ref="bulkPeopleByAccountIdMapper" />   
                                    <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
                                    <constructor-arg ref="bulkEntityStreamIdsMapper" />   
                                </bean>
                            </entry>
                            <entry key="organization">
                                <bean 
                                    class="org.eurekastreams.server.service.actions.strategies.activity.datasources.OrgPersistenceRequestTransformer">
                                    <constructor-arg ref="bulkOrganizationsByShortNameMapper" />   
                                </bean>
                            </entry>                            
                            <entry key="savedBy">
                                <bean 
                                    class="org.eurekastreams.server.service.actions.strategies.activity.datasources.SavedActivityPersistenceRequestTransformer">
                                    <constructor-arg ref="bulkPeopleByAccountIdMapper" />   
                                </bean>
                            </entry>                            
                            <entry key="parentOrg">
                                <bean 
                                    class="org.eurekastreams.server.service.actions.strategies.activity.datasources.ParentOrgPersistenceRequestTransformer">
                                    <constructor-arg ref="bulkPeopleByAccountIdMapper" />   
                                </bean>
                            </entry>                            
                        </map>                  
                    </constructor-arg>
		            <constructor-arg>
						<bean
							class="org.eurekastreams.server.service.actions.strategies.activity.OrSortedListCollider" />            
		            </constructor-arg>		            						
				</bean>            
            </constructor-arg>
            <constructor-arg ref="luceneActivityDataSource" />
    		<constructor-arg ref="bulkActivitiesMapper" />
            <constructor-arg>
                <list>
                    <ref bean="canCommentFilter" />
                    <ref bean="canShareFilter" />
                    <ref bean="likeFilter" />
                    <ref bean="deleteFilter" />
                    <ref bean="savedFilter" />
                    <ref bean="serverTimeFilter" />
                </list>
            </constructor-arg>
            <constructor-arg>
				<bean
					class="org.eurekastreams.server.service.actions.strategies.activity.InterpolationListCollider" />            
            </constructor-arg>
            <constructor-arg ref="securityTrimmer" />
            <constructor-arg ref="bulkPeopleByAccountIdMapper" />
    </bean>

	<bean id="getActivitiesByCompositeStream" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg >
          <bean class="org.eurekastreams.server.action.validation.stream.GetActivitiesByCompositeStreamIdValidation">
              <constructor-arg ref="compositeStreamActivityIdsMapper"/>
          </bean>
        </constructor-arg>
		<constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg ref="getActivitesByCompositeStreamExecutor" />
		<constructor-arg value="true" />
	</bean>

    <bean id="getUnseenActivityCount" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg >
          <bean class="org.eurekastreams.server.action.validation.stream.GetActivitiesByCompositeStreamIdValidation">
              <constructor-arg ref="compositeStreamActivityIdsMapper"/>
          </bean>
        </constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.GetUnseenActivityCountByCompositeStreamExecution">
                    <constructor-arg ref="getActivitesByCompositeStreamExecutor" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>
    
	<bean id="getIsRootOrgCoordinator" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.IsRootOrgCoordinatorExecution">
				<constructor-arg ref="isRootOrgCoordinatorStrategy" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="currentUserRootOrgCoordinatorAuthorization"
		class="org.eurekastreams.server.action.authorization.CurrentUserRootOrganizationCoordinatorAuthorization">
		<constructor-arg ref="isRootOrgCoordinatorStrategy" />
	</bean>

	<bean id="isRootOrgCoordinatorStrategy"
		class="org.eurekastreams.server.action.authorization.IsRootOrganizationCoordinator">
		<constructor-arg ref="getRootOrganizationIdAndShortNameMapper" />
		<constructor-arg ref="getOrgCoordinators" />
	</bean>

	<bean id="getApplicationAlerts" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.notification.GetApplicationAlertsExecution">
				<constructor-arg ref="getApplicationAlertsByUserId" />
				<!-- Max alerts to display. -->
				<constructor-arg type="int" value="50" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getUnreadApplicationAlertCount" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.notification.GetUnreadApplicationAlertCountExecution">
				<constructor-arg ref="getCachedAlertCountByUserId" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="setAllApplicationAlertsAsRead" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.notification.SetAllApplicationAlertsAsReadExecution">
				<constructor-arg ref="setAllApplicationAlertsAsReadByUserId" />
				<constructor-arg ref="syncUnreadApplicationAlertCountCacheByUserId" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="postActivityValidationStrategy"
		class="org.eurekastreams.server.action.validation.stream.PostActivityValidationStrategy">
		<constructor-arg ref="verbValidators" />
		<constructor-arg ref="objectValidators" />
	</bean>

	<bean id="postActivityAuthorizationStrategy"
		class="org.eurekastreams.server.action.authorization.stream.PostActivityAuthorizationStrategy">
		<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
		<constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
		<constructor-arg ref="getGroupFollowerIds" />
		<constructor-arg ref="bulkPeopleByAccountIdMapper" />
	</bean>

	<bean id="postGroupActivityExecutionStrategy"
		class="org.eurekastreams.server.action.execution.stream.PostActivityExecutionStrategy">
		<constructor-arg>
			<bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
		</constructor-arg>
		<constructor-arg ref="insertActivityComment" />
		<constructor-arg ref="bulkActivitiesMapper" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.service.actions.strategies.GroupRecipientRetriever">
				<constructor-arg ref="jpaGroupMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="postActivityUpdateStreamsByActorMapper" />
	</bean>

	<bean id="postPersonActivityExecutionStrategy"
		class="org.eurekastreams.server.action.execution.stream.PostActivityExecutionStrategy">
		<constructor-arg>
			<bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
		</constructor-arg>
		<constructor-arg ref="insertActivityComment" />
		<constructor-arg ref="bulkActivitiesMapper" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.service.actions.strategies.PersonRecipientRetriever">
				<constructor-arg ref="jpaPersonMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="postActivityUpdateStreamsByActorMapper" />
	</bean>

	<bean id="sendGroupAccessRequestAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.profile.SendGroupAccessRequestExecution">
				<constructor-arg ref="jpaGroupMapper" />
				<constructor-arg ref="insertRequestForGroupMembershipMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
		<constructor-arg ref="taskHandler" />
	</bean>

	<bean id="getRequestsForGroupMembershipByGroupAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<!-- Authorization -->
			<bean class="org.eurekastreams.server.action.authorization.CurrentUserGroupCoordinatorRecursivelyAuthorization">
				<constructor-arg>
					<bean class="org.eurekastreams.server.action.request.transformer.HasGroupIdToGroupIdRequestTransformer" />
				</constructor-arg>
				<constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess"/>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.profile.GetRequestsForGroupMembershipByGroupExecution">
				<constructor-arg ref="getRequestsForGroupMembershipMapper" />
				<constructor-arg ref="bulkPeopleMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="deleteRequestForGroupMembershipAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<!-- Authorization -->
			<bean class="org.eurekastreams.server.action.authorization.CurrentUserGroupCoordinatorRecursivelyAuthorization">
				<constructor-arg>
					<bean class="org.eurekastreams.server.action.request.transformer.HasGroupIdToGroupIdRequestTransformer" />
				</constructor-arg>
				<constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess"/>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.profile.DeleteRequestForGroupMembershipExecution">
				<constructor-arg ref="deleteRequestForGroupMembershipMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	<bean id="getPendingGroupsAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<!-- Authorization -->
			<bean class="org.eurekastreams.server.action.authorization.CurrentUserOrgCoordinatorRecursivelyAuthorization">
				<constructor-arg>
					<bean class="org.eurekastreams.server.action.request.transformer.GetPendingGroupsRequestToOrganizationIdRequestTransformer">
						<constructor-arg ref="bulkOrganizationsByShortNameMapper" />
					</bean>
				</constructor-arg>
   				<constructor-arg ref="getRecursiveOrgCoordinators"/>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.profile.GetPendingGroupsExecutionStrategy">
				<constructor-arg ref="getPendingDomainGroupsForOrg" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="reviewPendingGroupsAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.authorization.profile.ReviewPendingGroupAuthorizationStrategy">
				<constructor-arg ref="getRecursiveOrgCoordinators" />
				<constructor-arg ref="jpaGroupMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.profile.ReviewPendingGroupExecution">
				<constructor-arg ref="jpaGroupMapper" />
				<constructor-arg ref="emailNotifier" />
				<constructor-arg ref="addPrivateGroupIdToCachedCoordinatorAccessList" />
				<constructor-arg ref="jpaOrganizationMapper"/>
                <constructor-arg>
                    <bean class="org.eurekastreams.server.domain.strategies.OrganizationHierarchyTraverserBuilder" />
                </constructor-arg>
				<constructor-arg ref="deleteGroupExecution" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
		<constructor-arg ref="taskHandler" />
	</bean>

	<bean id="postPersonActivityServiceActionTaskHandler"
		class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<constructor-arg ref="postActivityValidationStrategy" />
        <constructor-arg ref="postActivityAuthorizationStrategy" />
        <constructor-arg ref="postPersonActivityExecutionStrategy" />
        <constructor-arg value="false" />
		<constructor-arg ref="taskHandler" />
	</bean>

	<bean id="postGroupActivityServiceActionTaskHandler"
		class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<constructor-arg ref="postActivityValidationStrategy" />
        <constructor-arg ref="postActivityAuthorizationStrategy" />
        <constructor-arg ref="postGroupActivityExecutionStrategy" />
        <constructor-arg value="false" />
		<constructor-arg ref="taskHandler" />
	</bean>

	<bean id="postActivityAsyncExecutionStrategy"
		class="org.eurekastreams.server.action.execution.stream.PostActivityAsyncExecutionStrategy">
		<constructor-arg ref="postCachedActivity" />
		<constructor-arg ref="findByIdMapper" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.stream.StoreStreamHashTagsForActivityStrategyImpl">
				<constructor-arg ref="hashTagExtractor" />
		        <constructor-arg ref="activityContentExtractor" />
		        <constructor-arg ref="getHashTagsFromDatabaseMapper" />
		        <constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
				</constructor-arg>
		        <constructor-arg ref="getRecursiveParentOrgIdsMapper" />
				<constructor-arg ref="bulkOrganizationsMapper" />
			</bean>
		</constructor-arg>
	</bean>

	<bean id="postActivityAsyncAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="postActivityAsyncExecutionStrategy" />
		<constructor-arg value="false" />
	</bean>

	<bean id="updatePersonalSettings" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.validation.settings.UpdateSettingsValidation">
				<constructor-arg>
					<util:list>
					</util:list>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.settings.UpdateSettingsExecution">
				<constructor-arg>
					<util:list>
						<bean
							class="org.eurekastreams.server.action.execution.settings.NotificationFilterPreferencesUpdater">
							<constructor-arg ref="notifierIdToDisplayMap" />
							<constructor-arg ref="setUserNotificationFilterPreferences" />
						</bean>
					</util:list>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="deleteOldApplicationAlerts" class="org.eurekastreams.commons.actions.async.AsyncAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.notification.DeleteOldApplicationAlertsExecution">
				<constructor-arg ref="deleteApplicationAlertsByDate" />
				<constructor-arg ref="getUserIdsWithUnreadApplicationAlertsByDate" />
				<constructor-arg ref="syncUnreadApplicationAlertCountCacheByUserId" />
				<!-- Age (in days) at which alerts should be deleted. -->
				<constructor-arg type="int" value="14" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

    <bean id="noExecutionStrategy" class="org.eurekastreams.commons.actions.NoExecutionStrategy">
    </bean>

	<bean id="noAuthorizationStrategy"
		class="org.eurekastreams.commons.actions.NoAuthorizationStrategy">
	</bean>

	<bean id="noValidationStrategy" class="org.eurekastreams.commons.actions.NoValidationStrategy">
	</bean>

	<bean id="reindexEntities" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="currentUserRootOrgCoordinatorAuthorization" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.AsyncActionSchedulerExecution">
				<constructor-arg value="reindexEntitiesAsync" />
			</bean>
		</constructor-arg>
		<constructor-arg ref="taskHandler" />
		<constructor-arg value="true" />
	</bean>

	<bean id="reindexEntitiesAsync"
		class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
		    <bean class="org.eurekastreams.server.action.execution.ReindexEntitiesExecution">
			    <constructor-arg>
					<bean class="org.eurekastreams.commons.search.bootstrap.EntityReindexer">
						<property name="entitiesToReindex">
							<list>
								<value>org.eurekastreams.server.domain.Organization
								</value>
								<value>org.eurekastreams.server.domain.DomainGroup
								</value>
								<value>org.eurekastreams.server.domain.Person
								</value>
								<value>org.eurekastreams.server.domain.Theme
								</value>
								<value>org.eurekastreams.server.domain.stream.Activity
								</value>
							</list>
						</property>
						<property name="searchIndexManager">
							<bean
								class="org.eurekastreams.commons.search.bootstrap.SearchIndexManager">
								<!-- Fetch Batch Size - the number of records to fetch per loop -->
								<constructor-arg value="50" />
								<!--
									Flush Batch Size - the number of records to process before
									committing to search index
								-->
								<constructor-arg value="50" />
							</bean>
						</property>
					</bean>
	            </constructor-arg>
            </bean>
		</constructor-arg>
		<constructor-arg value="true"/>
	</bean>

	<bean id="getBreadcrumbsListExecutionStrategy"
		class="org.eurekastreams.server.action.execution.profile.GetBreadcrumbsListExecution">
		<constructor-arg ref="getRecursiveParentOrgIdsMapper" />
		<constructor-arg ref="bulkOrganizationsMapper" />
	</bean>

	<bean id="getBreadcrumbsList" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg ref="getBreadcrumbsListExecutionStrategy" />
		<constructor-arg value="true" />
	</bean>

	<bean id="getDirectorySearchResultsValidation"
		class="org.eurekastreams.server.action.validation.directory.GetDirectorySearchResultsValidation">
	</bean>

	<bean id="getDirectorySearchResultsOrgs" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="getDirectorySearchResultsValidation" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.directory.GetDirectorySearchResultsExecution">
				<constructor-arg ref="directorySearchLuceneQueryBuilderForOrgs" />
				<constructor-arg ref="organizationSearchRequestBuilder" />
				<constructor-arg ref="searchResultAdditionalPropertyPopulator" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getDirectorySearchResultsPeople" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="getDirectorySearchResultsValidation" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.directory.GetDirectorySearchResultsExecution">
				<constructor-arg ref="directorySearchLuceneQueryBuilderForPeople" />
				<constructor-arg ref="personSearchRequestBuilder" />
				<constructor-arg ref="searchResultAdditionalPropertyPopulator" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getDirectorySearchResultsGroups" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="getDirectorySearchResultsValidation" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.directory.GetDirectorySearchResultsExecution">
				<constructor-arg ref="directorySearchLuceneQueryBuilderForGroups" />
				<constructor-arg ref="groupSearchRequestBuilder" />
				<constructor-arg ref="searchResultAdditionalPropertyPopulator" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getDirectorySearchResults" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="getDirectorySearchResultsValidation" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.directory.GetDirectorySearchResultsExecution">
				<constructor-arg
					ref="directorySearchLuceneQueryBuilderForOrgsPeopleGroups" />
				<constructor-arg ref="orgGroupPersonSearchRequestBuilder" />
				<constructor-arg ref="searchResultAdditionalPropertyPopulator" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getGadgetGalleryItemCategories" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemCategoriesExecution">
				<constructor-arg>
					<ref bean="jpaGalleryItemCategoryMapper" />
				</constructor-arg>
				<constructor-arg value="GADGET" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

    <bean id="getPluginGalleryItemCategories" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemCategoriesExecution">
                <constructor-arg>
                    <ref bean="jpaGalleryItemCategoryMapper" />
                </constructor-arg>
                <constructor-arg value="PLUGIN" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>
    
	<bean id="getThemeGalleryItemCategories" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemCategoriesExecution">
				<constructor-arg>
					<ref bean="jpaGalleryItemCategoryMapper" />
				</constructor-arg>
				<constructor-arg value="THEME" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getSortedGadgetGalleryItems" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.validation.gallery.GetGalleryItemsValidation" />
		</constructor-arg>
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemsExecution">
				<constructor-arg>
					<ref bean="jpaGadgetDefinitionMapper" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	<bean id="getSortedPluginGalleryItems" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.validation.gallery.GetGalleryItemsValidation" />
        </constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemsExecution">
                <constructor-arg>
                    <ref bean="jpaPluginDefinitionMapper" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

	<bean id="getSortedThemeGalleryItems" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.validation.gallery.GetGalleryItemsValidation" />
		</constructor-arg>
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemsExecution">
				<constructor-arg>
					<ref bean="jpaThemeMapper" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getChildOrganizations" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.GetOrganizationChildrenExecution">
				<constructor-arg ref="getRootOrganizationIdAndShortNameMapper" />
				<constructor-arg>

					<!-- Build the OrgChildrenGetter strategy for Organizations -->
					<bean factory-bean="orgChildrenGetterFactory" factory-method="buildOrgChildrenGetter">
						<constructor-arg value="ORGANIZATION" />
						<constructor-arg ref="directoryBrowsingLuceneQueryBuilderForOrgs" />
						<constructor-arg ref="childOrganizationsSearchRequestBuilder" />
						<constructor-arg>
							<bean
								class="org.eurekastreams.server.service.actions.strategies.directory.SortFieldBuilder">

								<!-- Override whatever the client sends in and just sort by Name -->
								<property name="overridingSortCriteria">
									<bean class="org.eurekastreams.server.domain.ResourceSortCriteria">
										<constructor-arg>

											<!-- List of individual sort criterion -->
											<bean id="searchResultTypesOrganization" class="java.util.ArrayList"
												scope="singleton">
												<constructor-arg>
													<list>
														<bean
															class="org.eurekastreams.server.domain.ResourceSortCriterion">
															<constructor-arg value="NAME" />
															<constructor-arg value="ASCENDING" />
														</bean>
													</list>
												</constructor-arg>
											</bean>

										</constructor-arg>
									</bean>
								</property>
							</bean>
						</constructor-arg>
						<constructor-arg value="false" />
					</bean>
				</constructor-arg>
				<constructor-arg ref="searchResultAdditionalPropertyPopulator" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getEmployeesForOrg" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.GetOrganizationChildrenExecution">
				<constructor-arg ref="getRootOrganizationIdAndShortNameMapper" />
				<constructor-arg>

					<!-- Build the OrgChildrenGetter strategy for People -->
					<bean factory-bean="orgChildrenGetterFactory" factory-method="buildOrgChildrenGetter">
						<constructor-arg value="PERSON" />
						<constructor-arg ref="directoryBrowsingLuceneQueryBuilderForPeople" />
						<constructor-arg ref="recursiveOrgEmployeesSearchRequestBuilder" />
						<constructor-arg>
							<bean
								class="org.eurekastreams.server.service.actions.strategies.directory.SortFieldBuilder" />
						</constructor-arg>
						<constructor-arg value="true" />
					</bean>

				</constructor-arg>
				<constructor-arg ref="searchResultAdditionalPropertyPopulator" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getGroupsForOrg" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.GetOrganizationChildrenExecution">
				<constructor-arg ref="getRootOrganizationIdAndShortNameMapper" />
				<constructor-arg>

					<!-- Build the OrgChildrenGetter strategy for Groups -->
					<bean factory-bean="orgChildrenGetterFactory" factory-method="buildOrgChildrenGetter">
						<constructor-arg value="GROUP" />
						<constructor-arg ref="directoryBrowsingLuceneQueryBuilderForGroups" />
						<constructor-arg ref="recursiveOrgGroupsSearchRequestBuilder" />
						<constructor-arg>
							<bean
								class="org.eurekastreams.server.service.actions.strategies.directory.SortFieldBuilder" />
						</constructor-arg>
						<constructor-arg value="true" />
					</bean>

				</constructor-arg>
				<constructor-arg ref="searchResultAdditionalPropertyPopulator" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getGadgetUserPrefById" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.start.GetGadgetUserPrefByIdExecutionStrategy">
				<constructor-arg ref="gadgetUserPrefMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getGallerySearchResults" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.gallery.GetGallerySearchResultsExecution">
				<constructor-arg ref="luceneSearchMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getAppData" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.GetAppDataExecution">
				<constructor-arg ref="jpaAppDataMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getPeopleByOpenSocialIds" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.validation.opensocial.GetPeopleByOpenSocialIdsValidation" />
		</constructor-arg>
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.GetPeopleByOpenSocialIdsExecution">
				<constructor-arg>
					<ref bean="jpaPersonMapper" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getUserActivities" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.GetUserActivitiesExecution">
				<constructor-arg ref="getStreamByPersonOwnerId" />
				<constructor-arg ref="bulkActivitiesMapper" />
				<constructor-arg ref="compositeStreamActivityIdsMapper" />
				<constructor-arg ref="bulkPeopleByOpenSocialIdMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	<bean id="getStreamSearchResultsExecution"
                class="org.eurekastreams.server.action.execution.stream.GetStreamSearchResultsExecution">
                <constructor-arg ref="searchActivitiesMapper" />
                <constructor-arg ref="bulkPeopleByAccountIdMapper" />
                <constructor-arg>
                    <list>
                        <ref bean="canCommentFilter" />
                        <ref bean="canShareFilter" />
            	        <ref bean="likeFilter" />
        	            <ref bean="deleteFilter" />
    	                <ref bean="savedFilter" />
	                    <ref bean="serverTimeFilter" />
                    </list>
                </constructor-arg>
    </bean>
    
     <bean id="getUnseenActivityCountForSearch" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.GetUnseenActivityCountByCompositeStreamExecution">
                    <constructor-arg ref="getStreamSearchResultsExecution" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

	<bean id="getStreamSearchResults" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg ref="getStreamSearchResultsExecution" />
		<constructor-arg value="true" />
	</bean>

	<bean id="getCurrentUserCompositeStreams" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.GetCurrentUserCompositeStreamsExecution">
				<constructor-arg ref="userCompositeStreamIdsMapper" />
				<constructor-arg ref="bulkCompositeStreamsMapper" />
				<constructor-arg ref="bulkPeopleMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="connectionFacade"
		class="org.eurekastreams.server.service.actions.strategies.links.ConnectionFacade">
		<property name="userAgent" value="Mozilla/4.76" />
		<property name="connectionTimeOut" value="6000" />
		<property name="proxyHost" value="${eureka.proxy.host}" />
		<property name="proxyPort" value="${eureka.proxy.port}" />
		<property name="redirectCodes">
			<list>
				<bean class="java.lang.Integer">
					<constructor-arg value="301" />
				</bean>
				<bean class="java.lang.Integer">
					<constructor-arg value="302" />
				</bean>
				<bean class="java.lang.Integer">
					<constructor-arg value="303" />
				</bean>
				<bean class="java.lang.Integer">
					<constructor-arg value="307" />
				</bean>
			</list>
		</property>
	</bean>

	<bean id="getParsedLinkInformation" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.GetParsedLinkInformationExecution">
				<constructor-arg ref="connectionFacade" />
				<constructor-arg ref="findLinkInformationByUrlMapper" />
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
				</constructor-arg>
				<constructor-arg>
					<list>
						<bean
							class="org.eurekastreams.server.service.actions.strategies.links.HtmlLinkParser">
							<property name="regex" value="(www.)?youtube.com" />
							<property name="imageParser">
								<bean
									class="org.eurekastreams.server.service.actions.strategies.links.YoutubeVideoThumbnailParser" />
							</property>
							<property name="titleParser">
								<bean
									class="org.eurekastreams.server.service.actions.strategies.links.HtmlLinkTitleParser">
									<constructor-arg value="128" />
								</bean>
							</property>
							<property name="descriptionParser">
								<bean
									class="org.eurekastreams.server.service.actions.strategies.links.MetaDescriptionParser">
									<constructor-arg value="255" />
								</bean>
							</property>
						</bean>
						<bean
							class="org.eurekastreams.server.service.actions.strategies.links.HtmlLinkParser">
							<property name="regex" value=".*" />
							<property name="imageParser">
								<bean
									class="org.eurekastreams.server.service.actions.strategies.links.BasicLinkImageParser">
									<constructor-arg ref="connectionFacade" />
									<constructor-arg value="10" />
									<constructor-arg value="3000" />
								</bean>
							</property>
							<property name="titleParser">
								<bean
									class="org.eurekastreams.server.service.actions.strategies.links.HtmlLinkTitleParser">
									<constructor-arg value="128" />
								</bean>
							</property>
							<property name="descriptionParser">
								<bean
									class="org.eurekastreams.server.service.actions.strategies.links.MetaDescriptionParser">
									<constructor-arg value="255" />
								</bean>
							</property>
						</bean>
					</list>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
	<bean id="viewActivityAuthorization" class="org.eurekastreams.server.action.authorization.stream.ViewActivityAuthorizationStrategy">
	   <constructor-arg ref="securityTrimmer" />
	</bean>

	<bean id="getActivityById" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<!-- Action's parameter: ActivityID -->
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="viewActivityAuthorization" />
		<constructor-arg>
			<!-- Execution Strategy -->
			<bean
				class="org.eurekastreams.server.action.execution.stream.GetActivityByIdExecutionStrategy">
				<constructor-arg ref="bulkActivitiesMapper" />
				<constructor-arg ref="getOrderedCommentIdsByActivityId" />
				<constructor-arg ref="getCommentsById" />
				<constructor-arg ref="commentDeletePropertyStrategy" />
                <constructor-arg ref="bulkPeopleByAccountIdMapper" />			
				<constructor-arg>
					<list>
						<ref bean="canCommentFilter" />
						<ref bean="canShareFilter" />
            	        <ref bean="likeFilter" />
        	            <ref bean="deleteFilter" />
    	                <ref bean="savedFilter" />
	                    <ref bean="serverTimeFilter" />
					</list>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getCurrentUserCompositeStreamSearches" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<!-- No arguments -->
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.GetCurrentUserCompositeStreamSearchesExecutionStrategy">
				<constructor-arg ref="userCompositeStreamSearchIdsMapper" />
				<constructor-arg ref="bulkCompositeStreamSearchesMapper" />
				<constructor-arg ref="bulkPeopleMapper" />
				<constructor-arg ref="bulkOrganizationsByShortNameMapper" />
				<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="getCurrentUserFollowedGroups" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.GetCurrentUserFollowedGroupsExecution">
				<constructor-arg ref="getFollowedGroupIds" />
				<constructor-arg ref="bulkDomainGroupsMapper" />
				<constructor-arg ref="bulkCompositeStreamsMapper" />
				<constructor-arg ref="bulkPeopleMapper" />
				<constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<bean id="setGroupStreamsOrder" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.SetGroupStreamsOrderExecution">
				<constructor-arg ref="getFollowedGroupIds" />
				<constructor-arg ref="reorderFollowedGroupIds" />
				<constructor-arg ref="memcachedCache" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="getFlaggedActivitiesForOrganization" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<!-- Authorization -->
			<bean class="org.eurekastreams.server.action.authorization.CurrentUserOrgCoordinatorRecursivelyAuthorization">
				<constructor-arg>
					<bean class="org.eurekastreams.server.action.request.transformer.HasOrganizationIdToOrganizationIdRequestTransformer" />
				</constructor-arg>
   				<constructor-arg ref="getRecursiveOrgCoordinators"/>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.GetFlaggedActivitiesForOrganizationExecution">
					<constructor-arg ref="getFlaggedActivitiesForOrganizationMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="flagActivity" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<!-- Action's parameter: ActivityID -->
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="viewActivityAuthorization" />		
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.UpdateActivityFlagExecution">
					<constructor-arg ref="updateActivityFlagMapper" />
					<constructor-arg value="true" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
		<constructor-arg ref="taskHandler" />
	</bean>

	<bean id="unflagActivity" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<!-- Action's parameter: ActivityID -->
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.authorization.CurrentUserOrgCoordinatorRecursivelyAuthorization">
				<constructor-arg>
					<bean class="org.eurekastreams.server.action.request.transformer.ActivityIdToRecipientParentOrgIdRequestTransformer">
						<constructor-arg ref="bulkActivitiesMapper" />
					</bean>
				</constructor-arg>
	  			<constructor-arg ref="getRecursiveOrgCoordinators"/>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.UpdateActivityFlagExecution">
					<constructor-arg ref="updateActivityFlagMapper" />
					<constructor-arg value="false" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
		<constructor-arg ref="taskHandler" />
	</bean>

	<!--
    *************
    Notifications
    ************* 
     -->
	<bean id="applicationProperties"
		class="org.eurekastreams.server.service.utility.ResourcePropertyFileLoaderFactoryBean">
		<constructor-arg value="classpath:conf/eurekastreams-server.properties" />
	</bean>

	<bean id="baseTemplateEmailBuilder"
		class="org.eurekastreams.server.action.execution.notification.TemplateEmailBuilder"
		abstract="true">
		<constructor-arg ref="emailerFactory" />
		<constructor-arg ref="bulkPeopleMapper" />
		<constructor-arg ref="applicationProperties" />
	</bean>

	<bean id="baseResourceContentLoader"
		class="org.eurekastreams.server.service.utility.ResourceContentLoaderFactoryBean"
		abstract="true" />

		
	<bean id="flaggedActivityNotificationEmailBuilder" parent="baseTemplateEmailBuilder">
		<constructor-arg value="$(eureka.notification.email.subjectprefix)$(actor.name) flagged a $(activity.type) in the $(dest.name) organization" />
		<constructor-arg>
			<bean parent="baseResourceContentLoader">
				<constructor-arg value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-FLAG_ACTIVITY.txt" />
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean parent="baseResourceContentLoader">
				<constructor-arg value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-FLAG_ACTIVITY.html" />
			</bean>
		</constructor-arg>
	</bean>

	<bean id="createEmailNotification" class="org.eurekastreams.commons.actions.async.AsyncAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.notification.CreateEmailNotificationExecution">
				<constructor-arg ref="emailerFactory" />
				<constructor-arg>
					<map>
					    <entry key="LIKE_ACTIVITY">
                            <bean parent="baseTemplateEmailBuilder">
                                <constructor-arg value="$(eureka.notification.email.subjectprefix)$(actor.name) liked $(activity.type)" />
                                <constructor-arg>
                                    <bean parent="baseResourceContentLoader">
                                        <constructor-arg
                                            value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-LIKE_ACTIVITY.txt" />
                                    </bean>
                                </constructor-arg>
                                <constructor-arg>
                                    <bean parent="baseResourceContentLoader">
                                        <constructor-arg
                                            value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-LIKE_ACTIVITY.html" />
                                    </bean>
                                </constructor-arg>
                            </bean>
                        </entry>
						<entry key="POST_TO_PERSONAL_STREAM">
							<bean parent="baseTemplateEmailBuilder">
								<constructor-arg value="$(eureka.notification.email.subjectprefix)$(actor.name) posted a $(activity.type) to your stream" />
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-POST_TO_PERSONAL_STREAM.txt" />
									</bean>
								</constructor-arg>
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-POST_TO_PERSONAL_STREAM.html" />
									</bean>
								</constructor-arg>
							</bean>
						</entry>
						<entry key="FOLLOW_PERSON">
							<bean parent="baseTemplateEmailBuilder">
								<constructor-arg value="$(eureka.notification.email.subjectprefix)$(actor.name) is following your stream" />
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-FOLLOW_PERSON.txt" />
									</bean>
								</constructor-arg>
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-FOLLOW_PERSON.html" />
									</bean>
								</constructor-arg>
							</bean>
						</entry>
						<entry key="COMMENT_TO_PERSONAL_STREAM">
							<bean parent="baseTemplateEmailBuilder">
								<constructor-arg value="$(eureka.notification.email.subjectprefix)$(actor.name) commented on a $(activity.type) in your stream" />
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-COMMENT_TO_PERSONAL_STREAM.txt" />
									</bean>
								</constructor-arg>
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-COMMENT_TO_PERSONAL_STREAM.html" />
									</bean>
								</constructor-arg>
							</bean>
						</entry>
						<entry key="COMMENT_TO_PERSONAL_POST">
							<bean parent="baseTemplateEmailBuilder">
								<constructor-arg value="$(eureka.notification.email.subjectprefix)$(actor.name) commented on your $(activity.type)" />
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-COMMENT_TO_PERSONAL_POST.txt" />
									</bean>
								</constructor-arg>
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-COMMENT_TO_PERSONAL_POST.html" />
									</bean>
								</constructor-arg>
							</bean>
						</entry>
						<entry key="COMMENT_TO_COMMENTED_POST">
							<bean parent="baseTemplateEmailBuilder">
								<constructor-arg value="$(eureka.notification.email.subjectprefix)$(actor.name) also commented on $(aux.name)'s $(activity.type)" />
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-COMMENT_TO_COMMENTED_POST.txt" />
									</bean>
								</constructor-arg>
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-COMMENT_TO_COMMENTED_POST.html" />
									</bean>
								</constructor-arg>
							</bean>
						</entry>
						<entry key="POST_TO_GROUP_STREAM">
							<bean parent="baseTemplateEmailBuilder">
								<constructor-arg value="$(eureka.notification.email.subjectprefix)$(actor.name) posted a $(activity.type) to the $(dest.name) stream" />
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-POST_TO_GROUP_STREAM.txt" />
									</bean>
								</constructor-arg>
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-POST_TO_GROUP_STREAM.html" />
									</bean>
								</constructor-arg>
							</bean>
						</entry>
						<entry key="COMMENT_TO_GROUP_STREAM">
							<bean parent="baseTemplateEmailBuilder">
								<constructor-arg value="$(eureka.notification.email.subjectprefix)$(actor.name) commented on a $(activity.type) in the $(dest.name) stream" />
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-COMMENT_TO_GROUP_STREAM.txt" />
									</bean>
								</constructor-arg>
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-COMMENT_TO_GROUP_STREAM.html" />
									</bean>
								</constructor-arg>
							</bean>
						</entry>
						<entry key="FOLLOW_GROUP">
							<bean parent="baseTemplateEmailBuilder">
								<constructor-arg value="$(eureka.notification.email.subjectprefix)$(actor.name) joined the $(dest.name) group" />
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-FOLLOW_GROUP.txt" />
									</bean>
								</constructor-arg>
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg
											value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-FOLLOW_GROUP.html" />
									</bean>
								</constructor-arg>
							</bean>
						</entry>
						<entry key="FLAG_PERSONAL_ACTIVITY" value-ref="flaggedActivityNotificationEmailBuilder" />
						<entry key="FLAG_GROUP_ACTIVITY" value-ref="flaggedActivityNotificationEmailBuilder" />
						<entry key="REQUEST_NEW_GROUP">
							<bean parent="baseTemplateEmailBuilder">
								<constructor-arg value="$(eureka.notification.email.subjectprefix)The $(aux.name) group is pending approval in the $(dest.name) organization" />
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-REQUEST_NEW_GROUP.txt" />
									</bean>
								</constructor-arg>
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-REQUEST_NEW_GROUP.html" />
									</bean>
								</constructor-arg>
							</bean>
						</entry>
						<entry key="REQUEST_NEW_GROUP_APPROVED">
							<bean parent="baseTemplateEmailBuilder">
								<constructor-arg value="$(eureka.notification.email.subjectprefix)Pending group request for the $(aux.name) group has been approved" />
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-REQUEST_NEW_GROUP_APPROVED.txt" />
									</bean>
								</constructor-arg>
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-REQUEST_NEW_GROUP_APPROVED.html" />
									</bean>
								</constructor-arg>
							</bean>
						</entry>
						<entry key="REQUEST_NEW_GROUP_DENIED">
							<bean parent="baseTemplateEmailBuilder">
								<constructor-arg value="$(eureka.notification.email.subjectprefix)Pending group request for the $(aux.name) group has been denied" />
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-REQUEST_NEW_GROUP_DENIED.txt" />
									</bean>
								</constructor-arg>
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-REQUEST_NEW_GROUP_DENIED.html" />
									</bean>
								</constructor-arg>
							</bean>
						</entry>
						<entry key="REQUEST_GROUP_ACCESS">
							<bean parent="baseTemplateEmailBuilder">
								<constructor-arg value="$(eureka.notification.email.subjectprefix)$(actor.name) requested to join the $(dest.name) private group" />
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-REQUEST_GROUP_ACCESS.txt" />
									</bean>
								</constructor-arg>
								<constructor-arg>
									<bean parent="baseResourceContentLoader">
										<constructor-arg value="classpath:/org/eurekastreams/server/conf/templates/email/Notification-REQUEST_GROUP_ACCESS.html" />
									</bean>
								</constructor-arg>
							</bean>
						</entry>
					</map>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>

	<util:map id="translators">
		<entry key="FOLLOWER">
			<bean class="org.eurekastreams.server.action.execution.notification.translator.FollowerTranslator" />
		</entry>
		<entry key="LIKE">
            <bean class="org.eurekastreams.server.action.execution.notification.translator.LikeTranslator" />
        </entry>
		<entry key="COMMENT">
			<bean class="org.eurekastreams.server.action.execution.notification.translator.CommentTranslator">
				<constructor-arg ref="getCommentorIdsByActivityId" />
				<constructor-arg ref="bulkActivitiesMapper" />
			</bean>
		</entry>
		<entry key="STREAM_POST">
			<bean class="org.eurekastreams.server.action.execution.notification.translator.StreamPostTranslator" />
		</entry>
		<entry key="GROUP_FOLLOWER">
			<bean class="org.eurekastreams.server.action.execution.notification.translator.GroupFollowerTranslator">
				<constructor-arg ref="getCoordinatorIdsByGroupId" />
			</bean>
		</entry>
		<entry key="GROUP_COMMENT">
			<bean class="org.eurekastreams.server.action.execution.notification.translator.GroupCommentTranslator">
				<constructor-arg ref="getCommentorIdsByActivityId" />
				<constructor-arg ref="bulkActivitiesMapper" />
				<constructor-arg><null /></constructor-arg>
				<!-- Replace above with <constructor-arg ref="getCoordinatorIdsByGroupId" /> to notify group coordinators when comments are posted to group streams.
-->
			</bean>
		</entry>
		<entry key="GROUP_STREAM_POST">
			<bean class="org.eurekastreams.server.action.execution.notification.translator.GroupStreamPostTranslator">
				<constructor-arg ref="getCoordinatorIdsByGroupId" />
			</bean>
		</entry>
		<entry key="FLAG_ACTIVITY">
			<bean class="org.eurekastreams.server.action.execution.notification.translator.FlagTranslator">
				<constructor-arg ref="bulkActivitiesMapper"/>
				<constructor-arg ref="getOrgCoordinators" />
			</bean>
		</entry>
		<entry key="REQUEST_NEW_GROUP">
			<bean class="org.eurekastreams.server.action.execution.notification.translator.RequestNewGroupTranslator">
				<constructor-arg ref="findByIdMapper" />
				<constructor-arg ref="getOrgCoordinators" />
			</bean>
		</entry>
		<entry key="REQUEST_GROUP_ACCESS">
			<bean class="org.eurekastreams.server.action.execution.notification.translator.RequestGroupAccessTranslator">
				<constructor-arg ref="getCoordinatorIdsByGroupId" />
			</bean>
		</entry>
	</util:map>

	<util:map id="notificationTypeToCategoryMap" key-type="org.eurekastreams.server.domain.NotificationType" value-type="org.eurekastreams.server.domain.NotificationFilterPreference$Category">
		<entry key="POST_TO_PERSONAL_STREAM" value="POST_TO_PERSONAL_STREAM" />
		<entry key="COMMENT_TO_PERSONAL_STREAM" value="COMMENT" />
		<entry key="COMMENT_TO_PERSONAL_POST" value="COMMENT" />
		<entry key="COMMENT_TO_COMMENTED_POST" value="COMMENT" />
		<entry key="FOLLOW_PERSON" value="FOLLOW_PERSON" />
		<entry key="POST_TO_GROUP_STREAM" value="POST_TO_GROUP_STREAM" />
		<entry key="COMMENT_TO_GROUP_STREAM" value="COMMENT_IN_GROUP_STREAM" />
		<entry key="FOLLOW_GROUP" value="FOLLOW_GROUP" />
		<entry key="FLAG_PERSONAL_ACTIVITY" value="FLAG_ACTIVITY" />
		<entry key="FLAG_GROUP_ACTIVITY" value="FLAG_ACTIVITY" />
		<entry key="REQUEST_NEW_GROUP" value="REQUEST_NEW_GROUP" />
		<entry key="REQUEST_GROUP_ACCESS" value="REQUEST_GROUP_ACCESS" />
		<entry key="LIKE_ACTIVITY" value="LIKE" />
	</util:map>
	
	<bean id="emailNotifier"
		class="org.eurekastreams.server.action.execution.notification.AsyncNotifier">
		<constructor-arg value="createEmailNotification" />
	</bean>

	<bean id="applicationAlertNotifier" class="org.eurekastreams.server.action.execution.notification.ApplicationAlertNotifier">
		<constructor-arg>
			<bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
		</constructor-arg>
		<constructor-arg ref="syncUnreadApplicationAlertCountCacheByUserId" />
	</bean>
	
	<!-- all notifiers, by ID -->
	<util:map id="notifiersByIdMap">
		<entry key="APP_ALERT" value-ref="applicationAlertNotifier" />
		<entry key="EMAIL" value-ref="emailNotifier" />
	</util:map>

	<!--
		names of notifiers which can be disabled, by ID, in order by columns
		on display
	-->
	<util:map id="notifierIdToDisplayMap" map-class="java.util.LinkedHashMap">
		<entry key="EMAIL" value="Email" />
	</util:map>

	<bean id="createNotificationsAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.validation.notification.CreateNotificationsValidation">
				<constructor-arg ref="translators" />
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.notification.CreateNotificationsExecution">
				<constructor-arg ref="translators" />
				<constructor-arg>
					<bean class="org.eurekastreams.server.action.execution.notification.NotificationPopulator">
						<constructor-arg ref="bulkPeopleMapper" />
						<constructor-arg ref="bulkDomainGroupsMapper" />
						<constructor-arg ref="bulkOrganizationsMapper" />
						<constructor-arg ref="bulkActivitiesMapper" />
					</bean>
				</constructor-arg>
				<constructor-arg ref="notifiersByIdMap" />
				<constructor-arg ref="getNotificationFilterPreferencesByPeopleIds" />
				<constructor-arg ref="notificationTypeToCategoryMap" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
		<constructor-arg ref="taskHandler" />
	</bean>

	<bean id="setTabLayout" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.authorization.start.SetTabLayoutAuthorization">
				<constructor-arg ref="tabPermission" />
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.start.SetTabLayoutExecution">
				<constructor-arg ref="jpaTabMapper" />
				<constructor-arg ref="updateGadgetsWithNewTabLayoutMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="deleteGadget" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.authorization.start.DeleteGadgetAuthorization">
				<constructor-arg>
					<ref bean="jpaTabMapper" />
				</constructor-arg>
				<constructor-arg>
					<ref bean="tabPermission" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.start.DeleteGadgetExecution">
				<constructor-arg>
					<ref bean="jpaTabMapper" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="deleteStreamSearch" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.DeleteStreamSearchExecution">
				<constructor-arg ref="deleteCachedCompositeStreamSearchByIdMapper" />
				<constructor-arg ref="findByIdMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="deleteStreamView" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.DeleteStreamViewExecution">
				<constructor-arg ref="deleteCachedCompositeStreamByIdMapper" />
				<constructor-arg ref="findByIdMapper" />
				<constructor-arg ref="deleteStreamViewAndRelatedSearches" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="updateGadgetDefinitionCountAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
		<!-- Quartz job -->
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.gallery.UpdateGadgetDefinitionCountExecution">
				<constructor-arg ref="jpaGadgetDefinitionMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="deleteTab" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.authorization.start.DeleteTabAuthorization">
				<constructor-arg>
					<ref bean="tabPermission" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.start.DeleteTabExecution">
				<constructor-arg>
					<ref bean="jpaPortalPageMapper" />
				</constructor-arg>
				<constructor-arg>
					<ref bean="jpaTabMapper" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="setTabOrder" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.start.SetTabOrderExecution">
				<constructor-arg>
					<ref bean="jpaPersonMapper" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="setGadgetState" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.start.SetGadgetStateExecution">
				<constructor-arg>
					<ref bean="jpaGadgetMapper" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="refreshCachedCustomCompositeStreamAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.RefreshCachedCompositeStreamExecution">
				<constructor-arg ref="compositeStreamActivityIdsMapper" />
				<constructor-arg>
					<bean
						class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
						<property name="staticField">
							<value>
								org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITIES_BY_COMPOSITE_STREAM
							</value>
						</property>
					</bean>
				</constructor-arg>
				<constructor-arg ref="memcachedCache" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="refreshCachedFollowingCompositeStreamAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.RefreshCachedCompositeStreamExecution">
				<constructor-arg ref="compositeStreamActivityIdsMapper" />
				<constructor-arg>
					<bean
						class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
						<property name="staticField">
							<value>
								org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITIES_BY_FOLLOWING
							</value>
						</property>
					</bean>
				</constructor-arg>
				<constructor-arg ref="memcachedCache" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="undeleteGadget" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.start.UndeleteGadgetExecution">
				<constructor-arg>
					<ref bean="jpaTabMapper" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="setStreamSearchOrder" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.SetStreamSearchOrderExecution">
				<constructor-arg>
					<ref bean="jpaPersonMapper" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="setStreamViewOrder" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.SetStreamViewOrderExecution">
				<constructor-arg ref="jpaPersonMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>

	<bean id="setActivityStar" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.SetActivityStarExecution">
				<constructor-arg ref="insertStarredActivity" />
				<constructor-arg ref="deleteStarredActivity" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>
	
	<bean id="setActivityLiked" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.stream.SetActivityLikeExecution">
				<constructor-arg ref="insertLikedActivity" />
				<constructor-arg ref="deleteLikedActivity" />
				<constructor-arg ref="bulkActivitiesMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
		<constructor-arg ref="taskHandler" />
	</bean>
	
	<bean id="getActivityLikers" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.GetPeopleWhoLikedActivityExecution">
                <constructor-arg ref="getPeopleWhoLikedActivity" />
                <constructor-arg ref="bulkPeopleMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>
    
	


	<bean id="organizationCacheUpdaterAsyncAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.profile.OrganizationCacheUpdaterExecution">
				<constructor-arg ref="getPrivateGroupsByUserId" />
				<constructor-arg ref="memcachedCache" />
				<constructor-arg ref="saveOrganizationCoordinatorIdsToCache" />
				<constructor-arg ref="orgParentHierarchyCacheCleaner" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>
	
	<bean id="personActivityAvatarUpdaterAsyncAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
		<!-- Update the author avatar ids in cached activities, comments, and embedded comments authored by a user
-->
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.profile.PersonAuthoredActivitiesAndCommentsCacheUpdater">
				<!-- Update the author information on all cached activities and comments for a user
-->
			
				<constructor-arg ref="getActivityIdsAuthoredByOrOriginallyAuthoredByEntityDBMapper" />
				<constructor-arg ref="getActivityCommentIdsAuthoredByPersonIdDBMapper" />
				<constructor-arg ref="getActivityIdsWithFirstOrLastCommentsAuthoredByPersonIdDBMapper" />
				
				<constructor-arg>
					<!-- Update the author's avatar in all cached activities authored by a user
-->
					<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateAuthorInfoInCachedActivities">
						<constructor-arg value="100" />
						
						<!-- Actions to perform on each activity's author stream entity dtos -->
						<constructor-arg>
							<list>
								<!-- Update the author and original author avatar ids for activities -->
								<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateStreamEntityDTOAvatarId" />
							</list>
						</constructor-arg>
						
						<property name="cache" ref="memcachedCache" />
					</bean>
				</constructor-arg>
				
				<constructor-arg>
					<!-- Update the author's avatar in all cached comments authored by a user
-->
					<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateAuthorInfoInCachedComments">
						<constructor-arg value="100" />
						
						<!-- Actions to perform on each comment -->
						<constructor-arg>
							<list>
								<!-- Update the author avatar id on the cached comments -->
								<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateCommentDTOAuthorAvatarId" />
							</list>
						</constructor-arg>
						<property name="cache" ref="memcachedCache" />
					</bean>
				</constructor-arg>
				
				<constructor-arg>
					<!-- Update the author's avatar in all first and last comments embedded in activities
-->
					<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateAuthorInfoInActivityEmbeddedCachedComments">
						<constructor-arg value="100" />
						
						<!-- Actions to perform on each comment -->
						<constructor-arg>
							<list>
								<!-- Update the author avatar id on the first and last embedded comments in activities
-->
								<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateCommentDTOAuthorAvatarId" />
							</list>
						</constructor-arg>
						
						<property name="cache" ref="memcachedCache" />
					</bean>
				</constructor-arg>
				
				
				<constructor-arg ref="jpaPersonMapper" />
			</bean>
			
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
    
    <bean id="personDisplayNameUpdaterAsyncAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
    	<!-- Update the author display name in cached activities, comments, and embedded comments authored by a user
-->
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg>
			<bean class="org.eurekastreams.server.action.execution.profile.PersonAuthoredActivitiesAndCommentsCacheUpdater">
				<!-- Update the author information on all cached activities and comments for a user
-->
			
				<constructor-arg ref="getActivityIdsAuthoredByOrOriginallyAuthoredByEntityDBMapper" />
				<constructor-arg ref="getActivityCommentIdsAuthoredByPersonIdDBMapper" />
				<constructor-arg ref="getActivityIdsWithFirstOrLastCommentsAuthoredByPersonIdDBMapper" />
				
				<constructor-arg>
					<!-- Update the author's display name in all cached activities authored by a user
-->
					<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateAuthorInfoInCachedActivities">
						<constructor-arg value="100" />
						
						<!-- Actions to perform on each activity's author stream entity dtos -->
						<constructor-arg>
							<list>
								<!-- Update the author and original author display names for activities
-->
								<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateStreamEntityDTODisplayName" />
							</list>
						</constructor-arg>
						
						<property name="cache" ref="memcachedCache" />
					</bean>
				</constructor-arg>
				
				<constructor-arg>
					<!-- Update the author's display name in all cached comments authored by a user
-->
					<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateAuthorInfoInCachedComments">
						<constructor-arg value="100" />
						
						<!-- Actions to perform on each comment -->
						<constructor-arg>
							<list>
								<!-- Update the author display name on the cached comments -->
								<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateCommentDTOAuthorDisplayName" />
							</list>
						</constructor-arg>
						<property name="cache" ref="memcachedCache" />
					</bean>
				</constructor-arg>
				
				<constructor-arg>
					<!-- Update the author's display name in all first and last comments embedded in activities
-->
					<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateAuthorInfoInActivityEmbeddedCachedComments">
						<constructor-arg value="100" />
						
						<!-- Actions to perform on each comment -->
						<constructor-arg>
							<list>
								<!-- Update the author display name on the first and last embedded comments in activities
-->
								<bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateCommentDTOAuthorDisplayName" />
							</list>
						</constructor-arg>
						
						<property name="cache" ref="memcachedCache" />
					</bean>
				</constructor-arg>
				
				
				<constructor-arg ref="jpaPersonMapper" />
			</bean>			
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
    
    <!-- This is called out separately because it is used in both the SetFollowing action as well as the GroupCreator action.
-->
    <bean id="setFollowingGroupStatusExecution" class="org.eurekastreams.server.action.execution.profile.SetFollowingGroupStatusExecution">
		<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
		<constructor-arg ref="bulkPeopleByAccountIdMapper" />
		<constructor-arg ref="jpaGroupMapper" />
		<constructor-arg ref="addCachedGroupFollower" />
		<constructor-arg ref="removeCachedGroupFollower" />
		<constructor-arg ref="getGroupFollowerIds" />
		<constructor-arg ref="removeCachedGroupActivitiesFromFollowingList" />
		<constructor-arg ref="getFollowedStreamViewByUser" />
		<constructor-arg ref="deleteRequestForGroupMembershipMapper" />
    </bean>

    <bean id="setFollowingStatusGroupTaskHandler" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.profile.SetFollowingStatusBaseValidation">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.validation.profile.SetFollowingGroupStatusValidation">
                        <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
                        <constructor-arg ref="bulkPeopleByAccountIdMapper" />
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.profile.SetFollowingGroupStatusAuthorization">
                <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
                <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="setFollowingGroupStatusExecution" />
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>
    
    <bean id="setFollowingStatusPersonTaskHandler" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.profile.SetFollowingStatusBaseValidation">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.validation.profile.SetFollowingPersonStatusValidation">
                        <constructor-arg>
                            <ref bean="bulkPeopleByAccountIdMapper" />
                        </constructor-arg>
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.profile.SetFollowingPersonStatusAuthorization" />
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.SetFollowingPersonStatusExecution">
                <constructor-arg ref="jpaPersonMapper" />
                <constructor-arg ref="bulkPeopleByAccountIdMapper" />
                <constructor-arg ref="addCachedPersonFollower" />
                <constructor-arg ref="removeCachedPersonFollower" />
                <constructor-arg ref="getFollowerIds" />
                <constructor-arg ref="removeCachedPersonActivitiesFromFollowingList" />
                <constructor-arg ref="getFollowedStreamViewByUser" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="initializeCache" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.InitializeCacheExecution">
                <constructor-arg ref="domainGroupCacheLoader" />
		        <constructor-arg ref="organizationCacheLoader" />
		        <constructor-arg ref="personCacheLoader" />
		        <constructor-arg ref="streamCacheLoader" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>
    
    <bean id="createPersonActionFactory" class="org.eurekastreams.server.action.execution.CreatePersonActionFactory">
        <constructor-arg ref="jpaTabMapper" />
        <constructor-arg ref="jpaOrganizationMapper" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.GetStreamViewByType" />
        </constructor-arg>
    </bean>
    
    
    
    <!-- WORKS (sync part, at least) -->
	<bean id="createGroup" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<!-- Validation -->
		  <constructor-arg>
		      <bean class="org.eurekastreams.server.action.validation.CreateGroupValidation">
		          <constructor-arg ref="bulkDomainGroupsByShortNameMapper"/>
		          <constructor-arg ref="bulkOrganizationsByShortNameMapper"/>  
		      </bean>   
		  </constructor-arg>
        <!-- Authorization - done inside execution (for now) -->
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<!-- Execution -->
			<bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="createPersonActionFactory" />
				<constructor-arg ref="updaterStrategy" />
				<constructor-arg ref="groupCreator" />
			</bean>
		</constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>
	
	<!-- WORKS (sync part, at least) -->
	<bean id="updateGroup" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<!-- Validation -->
		<constructor-arg>
             <bean class="org.eurekastreams.server.action.validation.UpdateGroupValidation">
                <constructor-arg ref="bulkOrganizationsByShortNameMapper"/>  
             </bean>
        </constructor-arg>
		<constructor-arg>
			<!-- Authorization -->
			<bean id="updateGroupAuthorization" class="org.eurekastreams.server.action.authorization.CurrentUserGroupCoordinatorRecursivelyAuthorization">
				<constructor-arg>
					<bean class="org.eurekastreams.server.action.request.transformer.HashMapValueRequestTransformer">
						<constructor-arg value="id" />
					</bean>
				</constructor-arg>
				<constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess"/>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<!-- Execution -->
			<bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="createPersonActionFactory" />
				<constructor-arg ref="updaterStrategy" />
				<constructor-arg ref="groupUpdater" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

	<bean id="createPerson" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<!-- Validation -->
		<constructor-arg ref="noValidationStrategy" />
		<!-- Authorization -->
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<!-- Execution -->
			<bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="createPersonActionFactory" />
				<constructor-arg ref="updaterStrategy" />
				<constructor-arg ref="personCreator" />
			</bean>
		</constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>
	
	<!-- Note: The UpdatePersonExecution strategy takes another TaskHandlerExecutionStrategy to do the full person update.
-->
	<bean id="updatePerson" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg>
             <!-- Validation -->
            <bean class="org.eurekastreams.server.action.validation.UpdatePersonValidation">
	            <constructor-arg>
	                 <bean class="org.eurekastreams.server.action.validation.EmailAddressValidator"/>
	            </constructor-arg>
	            <constructor-arg ref="bulkOrganizationsByShortNameMapper"/>
            </bean>
        </constructor-arg>
        <constructor-arg>
        	<!-- Authorization -->
            <bean class="org.eurekastreams.server.action.authorization.IsFormSubmitterUserAuthorization">
                <constructor-arg value="accountId"/>
            </bean>
        </constructor-arg>
        <constructor-arg>
			<!-- Execution -->
			<bean class="org.eurekastreams.server.action.execution.UpdatePersonExecution">
                <constructor-arg ref="jpaOrganizationMapper"/>
                <constructor-arg ref="jpaPersonMapper"/>
                <constructor-arg>
		            <bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
		                <constructor-arg ref="jpaPersonMapper" />
		                <constructor-arg ref="createPersonActionFactory" />
		                <constructor-arg ref="updaterStrategy" />
		                <constructor-arg ref="personUpdater" />
		            </bean>
		        </constructor-arg>
		        <constructor-arg ref="jpaBackgroundMapper"/>
		        <constructor-arg>
                    <bean class="org.eurekastreams.server.domain.strategies.OrganizationHierarchyTraverserBuilder" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
	</bean>
    
    <!-- WORKS (sync part, at least) -->
    <bean id="createOrganization" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
	    <constructor-arg>
        <!-- Validation -->
            <bean class="org.eurekastreams.server.action.validation.CreateOrganizationValidation">
                <constructor-arg ref="bulkOrganizationsByShortNameMapper"/>  
            </bean>   
        </constructor-arg>
		<constructor-arg>
			<!-- Authorization -->
			<bean class="org.eurekastreams.server.action.authorization.CurrentUserOrgCoordinatorRecursivelyAuthorization">
				<constructor-arg>
					<bean class="org.eurekastreams.server.action.request.transformer.OrganizationShortNameToIdRequestTransformer">
						<constructor-arg ref="bulkOrganizationsByShortNameMapper" />
						<constructor-arg value="orgParent" />
						<property name="returnValueAsString" value="true"/>
					</bean>
				</constructor-arg>
   				<constructor-arg ref="getRecursiveOrgCoordinators"/>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<!-- Execution -->
			<bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="createPersonActionFactory" />
				<constructor-arg ref="updaterStrategy" />
				<constructor-arg ref="organizationCreator" />
			</bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>
    
    <!-- WORKS (sync part, at least) -->
    <bean id="updateOrganization" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
    	<!-- Validation -->
		<constructor-arg>
             <bean class="org.eurekastreams.server.action.validation.UpdateOrganizationValidation" />
        </constructor-arg>
		<constructor-arg>
			<!-- Authorization -->
			<bean id="updateOrgAuthorization" class="org.eurekastreams.server.action.authorization.CurrentUserOrgCoordinatorRecursivelyAuthorization">
				<constructor-arg>
					<bean class="org.eurekastreams.server.action.request.transformer.HashMapValueRequestTransformer">
						<constructor-arg value="id" />
					</bean>
				</constructor-arg>
				<constructor-arg ref="getRecursiveOrgCoordinators"/>
			</bean>          
		</constructor-arg>
		<constructor-arg>
			<!-- Execution -->
			<bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="createPersonActionFactory" />
				<constructor-arg ref="updaterStrategy" />
				<constructor-arg ref="organizationUpdater" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
		<constructor-arg ref="taskHandler" />
    </bean>
	
	<!-- WORKS (sync part, at least) -->
	<bean id="createStreamView" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<constructor-arg>
			<!-- Validation -->
			<bean class="org.eurekastreams.server.action.validation.MapParameterDecoratorValidation">
				<constructor-arg>
					<bean class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
						<constructor-arg value="name" />
						<constructor-arg value="java.lang.String" />
						<constructor-arg value="Name is required" />
						<property name="mapParameterValidatorDecorator">
							<bean
								class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
								<constructor-arg value="scopes" />
								<constructor-arg value="java.util.List" />
								<constructor-arg
									value="At least one stream is required" />
							</bean>
						</property>
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<!-- Authorization -->
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<!-- Execution -->
			<bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="createPersonActionFactory" />
				<constructor-arg ref="streamViewCreator" />
				<constructor-arg ref="streamViewCreator" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>
	
	<!-- WORKS (sync part, at least) -->
	<bean id="updateStreamView" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<constructor-arg>
			<!-- Validation -->
			<bean class="org.eurekastreams.server.action.validation.MapParameterDecoratorValidation">
				<constructor-arg>
					<bean class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
						<constructor-arg value="name" />
						<constructor-arg value="java.lang.String" />
						<constructor-arg value="Name is required" />
						<property name="mapParameterValidatorDecorator">
							<bean
								class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
								<constructor-arg value="scopes" />
								<constructor-arg value="java.util.List" />
								<constructor-arg
									value="At least one stream is required" />
							</bean>
						</property>
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
        <constructor-arg>
        	<!-- Authorization -->
            <bean class="org.eurekastreams.server.action.authorization.stream.UpdateStreamViewAuthorization">
              <constructor-arg ref="findUserStreamViewByIdMapper" />
            </bean>
        </constructor-arg>
		<constructor-arg>
			<!-- Execution -->
			<bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="createPersonActionFactory" />
				<constructor-arg ref="streamViewUpdater" />
				<constructor-arg ref="streamViewUpdater" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

	<!-- WORKS (sync part, at least) -->
	<bean id="createStreamSearch" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<constructor-arg>
			<!-- Validation -->
			<bean class="org.eurekastreams.server.action.validation.MapParameterDecoratorValidation">
				<constructor-arg>
					<bean class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
						<constructor-arg value="name" />
						<constructor-arg value="java.lang.String" />
						<constructor-arg value="Name is required" />
						<property name="mapParameterValidatorDecorator">
							<bean
								class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
								<constructor-arg value="keywords" />
								<constructor-arg value="java.lang.String" />
								<constructor-arg
									value="At least one keyword is required" />
							</bean>
						</property>
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<!-- Authorization -->
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<!-- Execution -->
			<bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="createPersonActionFactory" />
				<constructor-arg ref="streamSearchCreator" />
				<constructor-arg ref="streamSearchCreator" />
			</bean>
		</constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>
			
	<!-- WORKS (sync part, at least) - but ui doesn't repaint, just hangs
-->	
	<bean id="updateStreamSearch" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<constructor-arg>
			<!-- Validation -->
			<bean class="org.eurekastreams.server.action.validation.MapParameterDecoratorValidation">
				<constructor-arg>
					<bean class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
						<constructor-arg value="name" />
						<constructor-arg value="java.lang.String" />
						<constructor-arg value="Name is required" />
						<property name="mapParameterValidatorDecorator">
							<bean
								class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
								<constructor-arg value="keywords" />
								<constructor-arg value="java.lang.String" />
								<constructor-arg
									value="At least one keyword is required" />
							</bean>
						</property>
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<!-- Authorization -->
		    <bean class="org.eurekastreams.server.action.authorization.stream.UpdateStreamSearchAuthorization">
		      <constructor-arg ref="findUserStreamSearchByIdMapper" />
		    </bean>
		</constructor-arg>
		<constructor-arg>
			<!-- Execution -->
			<bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="createPersonActionFactory" />
				<constructor-arg ref="streamSearchUpdater" />
				<constructor-arg ref="streamSearchUpdater" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>
	
	<bean id="createRootOrganization" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<!-- Validation -->
		<constructor-arg ref="noValidationStrategy"/>
		<constructor-arg ref="noAuthorizationStrategy"/>
		<constructor-arg>
			<!-- Execution -->
			<bean class="org.eurekastreams.server.action.execution.CreateRootOrganizationExecution">
				<constructor-arg ref="getRootOrganizationIdAndShortNameMapper" />
				<constructor-arg>
					<bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
						<constructor-arg ref="jpaPersonMapper" />
						<constructor-arg ref="createPersonActionFactory" />
						<constructor-arg ref="updaterStrategy" />
						<constructor-arg ref="organizationCreator" />
					</bean>	           
				</constructor-arg>
				<constructor-arg ref="jpaOrganizationMapper" />
				<constructor-arg ref="jpaPersonMapper" />
				<constructor-arg ref="findSystemSettings" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
		<constructor-arg ref="taskHandler" />
	</bean>
    
    <bean id="personLookupStrategy" class="org.eurekastreams.server.service.actions.strategies.DomainPersonLookup">
        <constructor-arg ref="jpaPersonMapper"/>            
    </bean>
    
    <bean id="ldapPersonLookupViaAttribute" class="org.eurekastreams.server.service.actions.strategies.ldap.PersonLookupViaAttribute">
        <constructor-arg ref="findPersonByCnWildcardMapper"/>
    </bean>
    
    <bean id="ldapPersonLookupViaAttributeQuery" class="org.eurekastreams.server.service.actions.strategies.ldap.PersonLookupViaAttribute">
        <constructor-arg ref="findPersonByProvidedLdapQueryMapper"/>
    </bean>
           
    <bean id="ldapPersonLookupViaLdapGroupMembership" class="org.eurekastreams.server.service.actions.strategies.ldap.PersonLookupViaMembership">
        <constructor-arg ref="findLdapGroupByCnNameMapper"/>       
        <constructor-arg ref="findLdapGroupByLdapGroupMembershipMapper"/>       
        <constructor-arg ref="findPersonByDirectLdapGroupMembershipMapper"/>       
        <constructor-arg ref="baseLdapPath"/>        
    </bean>

    <bean id="multiSourcePersonLookupStrategy"
        class="org.eurekastreams.server.service.actions.strategies.MultiSourcePersonLookup">
        <constructor-arg>
            <ref bean="personLookupStrategy" />
        </constructor-arg>
        <constructor-arg>
            <ref bean="ldapPersonLookupViaAttribute" />
        </constructor-arg>
    </bean>       
    
    <bean id="groupCreator"
        class="org.eurekastreams.server.service.actions.strategies.GroupCreator">
        <constructor-arg ref="jpaGroupMapper" />
        <constructor-arg ref="jpaOrganizationMapper" />
        <constructor-arg ref="jpaPersonMapper" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.domain.strategies.OrganizationHierarchyTraverserBuilder" />
        </constructor-arg>
        <constructor-arg ref="organizationHierarchyCache" />
        <constructor-arg ref="setFollowingGroupStatusExecution" />
    </bean>

    <bean id="groupUpdater"
        class="org.eurekastreams.server.service.actions.strategies.GroupUpdater">
        <constructor-arg ref="jpaGroupMapper" />
        <constructor-arg ref="jpaOrganizationMapper" />
        <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
        <constructor-arg ref="clearActivityStreamSearchStringCacheOnGroupUpdate" />
        <constructor-arg ref="setFollowingGroupStatusExecution" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.domain.strategies.OrganizationHierarchyTraverserBuilder" />
        </constructor-arg>
    </bean>

    <bean id="urlGenerator" class="org.eurekastreams.server.domain.AvatarUrlGenerator">
        <constructor-arg value="PERSON" />
    </bean>

    <bean id="imageWriter"
        class="org.eurekastreams.server.service.actions.strategies.ImageWriter">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.DeleteImage" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.GetImageByIdentifier" />
                </constructor-arg>
    </bean>

    <bean id="openSocialRegEx" class="java.lang.String">
        <constructor-arg value="\w{8}-\w{4}-\w{4}-\w{4}-\w{12}" />
    </bean>
    
	<bean id="pluginDefinitionPopulator"
        class="org.eurekastreams.server.service.actions.strategies.galleryitem.PluginDefinitionPopulator">
        <constructor-arg ref="gadgetMetaDataHttpFetcher" />
        <constructor-arg value="30"/>
        <constructor-arg value="NOTE"/>
    </bean>    
    
	<bean id="gadgetDefinitionPopulator"
		class="org.eurekastreams.server.service.actions.strategies.galleryitem.GadgetDefinitionPopulator">
		<constructor-arg ref="gadgetMetaDataHttpFetcher" />
	</bean>    

    <bean id="organizationPopulator"
        class="org.eurekastreams.server.service.actions.strategies.OrganizationPopulator">
        <constructor-arg ref="jpaOrganizationMapper" />
        <constructor-arg ref="jpaPersonMapper" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.PersonLookupUtilityStrategy">
                <constructor-arg ref="ldapPersonLookupViaLdapGroupMembership" />
                <constructor-arg ref="populateOrgChildWithSkeletonParentOrgsCacheMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.PersonLookupUtilityStrategy">
                <constructor-arg ref="ldapPersonLookupViaAttributeQuery" />
                <constructor-arg ref="populateOrgChildWithSkeletonParentOrgsCacheMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="createPersonActionFactory" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.domain.strategies.OrganizationHierarchyTraverserBuilder" />
        </constructor-arg>
    </bean>

    <bean id="updaterStrategy"
        class="org.eurekastreams.server.service.actions.strategies.ReflectiveUpdater">
    </bean>

    <bean id="organizationCreator"
        class="org.eurekastreams.server.service.actions.strategies.OrganizationCreator">
        <constructor-arg ref="jpaOrganizationMapper" />
    </bean>

    <bean id="organizationUpdater"
        class="org.eurekastreams.server.service.actions.strategies.OrganizationUpdater">
        <constructor-arg ref="jpaOrganizationMapper" />
        <constructor-arg ref="jpaPersonMapper" />
        <constructor-arg ref="bulkOrganizationsMapper" />
        <constructor-arg ref="clearActivityStreamSearchStringCacheOnOrgUpdate" />
    </bean>

    <!-- actions to be called asynchronously by quartz scheduler -->

    <bean id="personCreator"
        class="org.eurekastreams.server.service.actions.strategies.PersonCreator">
        <constructor-arg ref="jpaPersonMapper" />
        <constructor-arg ref="jpaTabMapper" />
        <constructor-arg ref="jpaOrganizationMapper" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.persistence.mappers.GetStreamViewByType" />
        </constructor-arg>
    </bean>

    <bean id="personUpdater" class="org.eurekastreams.server.service.actions.strategies.PersonUpdater">
        <constructor-arg ref="jpaPersonMapper" />
        <constructor-arg>
        	<bean class="org.eurekastreams.server.action.execution.profile.UpdatePersonDisplayNameCaches">
        		<constructor-arg ref="bulkPeopleMapper" />
        	</bean>
        </constructor-arg>
    </bean>

    <bean id="streamViewCreator"
        class="org.eurekastreams.server.service.actions.strategies.StreamViewCreator">
        <constructor-arg ref="addCachedCompositeStreamMapper" />
        <constructor-arg ref="findByIdMapper" />
        <constructor-arg ref="getStreamScopeById" />
    </bean>

    <bean id="streamViewUpdater"
        class="org.eurekastreams.server.service.actions.strategies.StreamViewUpdater">
        <constructor-arg ref="updateCachedCompositeStreamMapper" />
        <constructor-arg ref="findUserStreamViewByIdMapper" />
        <constructor-arg ref="getStreamScopeProxyById" />
        <constructor-arg ref="getCompositeStreamById" />
        <constructor-arg ref="addCachedActivityToListByStreamScope" />
        <constructor-arg ref="removeCachedActivitiesFromListByStreamScope" />
    </bean>

    <bean id="streamSearchCreator"
        class="org.eurekastreams.server.service.actions.strategies.StreamSearchCreator">
        <constructor-arg>
            <ref bean="addCachedCompositeStreamSearchMapper" />
        </constructor-arg>
        <constructor-arg>
            <ref bean="findByIdMapper" />
        </constructor-arg>
        <constructor-arg>
            <ref bean="findByIdMapper" />
        </constructor-arg>
    </bean>

    <bean id="streamSearchUpdater"
        class="org.eurekastreams.server.service.actions.strategies.StreamSearchUpdater">
        <constructor-arg>
            <ref bean="updateCachedCompositeStreamSearchMapper" />
        </constructor-arg>
        <constructor-arg>
            <ref bean="findByIdMapper" />
        </constructor-arg>
        <constructor-arg>
            <ref bean="findByIdMapper" />
        </constructor-arg>
        <constructor-arg>
            <ref bean="findUserStreamSearchByIdMapper" />
        </constructor-arg>
    </bean>

    <bean id="tabPermission"
        class="org.eurekastreams.server.action.authorization.start.TabPermission">
        <constructor-arg>
            <ref bean="getTabPermissionByPersonAndTabMapper" />
        </constructor-arg>
    </bean>

    <bean id="defaultResourceSortOrder" class="org.eurekastreams.server.domain.ResourceSortCriteria">
        <constructor-arg>
            <list>
                <bean id="sortByNameAsc"
                    class="org.eurekastreams.server.domain.ResourceSortCriterion">
                    <constructor-arg value="NAME" />
                    <constructor-arg value="ASCENDING" />
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <!-- ****************************** -->
    <!-- OAuth Action configuration     -->
    <!-- ****************************** -->
    
    <bean name="oauthDataStore"
        class="org.eurekastreams.server.service.opensocial.oauth.OAuthDataStoreImpl">
        <property name="serviceActionController" ref="serviceActionController" />
        <property name="principalPopulatorTransWrapper" ref="openSocialPrincipalPopulatorTransWrapper" />
        <constructor-arg ref="createOAuthRequestToken" />
        <constructor-arg ref="oauthAuthorize" />
        <constructor-arg ref="updateRequestToAccessToken" />
        <constructor-arg ref="getOAuthEntryByToken" />
        <constructor-arg ref="disableOAuthToken" />
        <constructor-arg ref="removeOAuthToken" />
        <constructor-arg ref="getOAuthConsumerByConsumerKey" />
        <constructor-arg ref="getSecurityTokenForConsumerRequest" />
    </bean>

	<bean id="oauthAuthorize" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.OAuthAuthorizeExecution">
				<constructor-arg ref="getOAuthEntry" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>	

	<bean id="oauthEntryConversionStrat" class="org.eurekastreams.server.action.execution.opensocial.OAuthEntryConversionStrategy">
		<constructor-arg ref="getOAuthConsumerByConsumerKeyMapper" />
	</bean>
	
	<bean id="createOAuthRequestToken" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.CreateOAuthRequestTokenExecution">
				<constructor-arg value="${eureka.oauth.domain}" />
				<constructor-arg value="${eureka.oauth.container}" />
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
				</constructor-arg>
				<constructor-arg ref="oauthEntryConversionStrat" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>	
	
	<bean id="updateRequestToAccessToken" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.UpdateRequestToAccessTokenExecution">
				<constructor-arg ref="deleteOAuthEntry" />
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
				</constructor-arg>
				<constructor-arg ref="oauthEntryConversionStrat" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>	

	<bean id="getOAuthEntryByToken" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.GetOAuthEntryByTokenExecution">
				<constructor-arg ref="getOAuthEntry" />
				<constructor-arg ref="oauthEntryConversionStrat" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>	
	
	<bean id="disableOAuthToken" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.DisableOAuthTokenExecution">
				<constructor-arg ref="getOAuthEntry" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>	
	
	<bean id="removeOAuthToken" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.RemoveOAuthTokenExecution">
				<constructor-arg ref="deleteOAuthEntry" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>	
	
	<bean id="getOAuthConsumerByConsumerKey" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.GetOAuthConsumerByConsumerKeyExecution">
				<constructor-arg ref="getOAuthConsumerByConsumerKeyMapper" />
				<constructor-arg value="${eureka.oauth.requesttokenurl}" />
				<constructor-arg value="${eureka.oauth.authorizeurl}" />
				<constructor-arg value="${eureka.oauth.accesstokenurl}" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
	
		<bean id="getSecurityTokenForConsumerRequest" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.GetSecurityTokenForConsumerRequestExecution">
				<constructor-arg value="${eureka.oauth.domain}" />
				<constructor-arg value="${eureka.oauth.container}" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>
		
	<bean id="getConsumerInfo" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.GetConsumerInfoExecution">
				<constructor-arg ref="getOAuthConsumerByServiceNameMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>	

	<bean id="getConsumerTokenInfo" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.GetConsumerTokenInfoExecution">
				<constructor-arg ref="getOAuthConsumerByServiceNameMapper" />
				<constructor-arg ref="getOAuthTokenMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="true" />
	</bean>	

	<bean id="setConsumerTokenInfo" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.SetConsumerTokenInfoExecution">
				<constructor-arg ref="getOAuthConsumerByServiceNameMapper" />
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
				</constructor-arg>
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>	

	<bean id="removeConsumerToken" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.action.execution.opensocial.RemoveConsumerTokenExecution">
				<constructor-arg ref="getOAuthConsumerByServiceNameMapper" />
				<constructor-arg ref="deleteOAuthTokenMapper" />
			</bean>
		</constructor-arg>
		<constructor-arg value="false" />
	</bean>	

    <bean id="emailerFactory"
        class="org.eurekastreams.server.service.actions.strategies.EmailerFactory">
        <constructor-arg value="smtp" />
        <constructor-arg>
            <map>
                <entry key="mail.smtp.host" value="${eureka.mail.smtp.host}" />
                <entry key="mail.smtp.port" value="${eureka.mail.smtp.port}" />
            </map>
        </constructor-arg>
        <constructor-arg value="${eureka.mail.support.emailaddress}" />
    </bean>

    <bean id="canCommentFilter"
        class="org.eurekastreams.server.service.actions.strategies.activity.CanCommentFilter">
        <constructor-arg>
            <ref bean="bulkPeopleByAccountIdMapper" />
        </constructor-arg>
        <constructor-arg>
            <ref bean="bulkDomainGroupsByShortNameMapper" />
        </constructor-arg>
        <constructor-arg>
            <ref bean="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
        </constructor-arg>
    </bean>

    <bean id="canShareFilter"
        class="org.eurekastreams.server.service.actions.strategies.activity.CanShareFilter">
        <constructor-arg>
            <ref bean="bulkDomainGroupsByShortNameMapper" />
        </constructor-arg>
    </bean>

	<bean id="likeFilter"
		class="org.eurekastreams.server.service.actions.strategies.activity.PopulateActivityDTOLikeData">
		<constructor-arg ref="getLikedActivityIdsByUserId" />
		<constructor-arg ref="getPeopleWhoLikedActivity" />
		<constructor-arg ref="bulkPeopleMapper" />
		<constructor-arg value="10" />
	</bean>
	<bean id="deleteFilter"
		class="org.eurekastreams.server.service.actions.strategies.activity.PopulateActivityDTODeletabilityData">
		<constructor-arg ref="commentDeletePropertyStrategy" />
		<constructor-arg ref="activityDeletePropertyStrategy" />
	</bean>
	<bean id="savedFilter"
		class="org.eurekastreams.server.service.actions.strategies.activity.PopulateActivityDTOSavedData">
		<constructor-arg ref="getStarredActivityIds" />
	</bean>
	<bean id="serverTimeFilter"
		class="org.eurekastreams.server.service.actions.strategies.activity.PopulateActivityDTOServerDateTime" />
            
	<bean id="getActivitiesByRequest" class="org.eurekastreams.commons.actions.service.ServiceAction">
		<constructor-arg ref="noValidationStrategy" />
		<constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg ref="getActivitiesByRequestExecutor" />
		<constructor-arg value="true" />
	</bean>

    <!--
        Beans for all of the Verb Validators that will be added to the
        VerbValidator HashMap
    -->
    <bean id="postVerbValidator"
        class="org.eurekastreams.server.service.actions.strategies.activity.PostVerbValidator" />

    <bean id="shareVerbValidator"
        class="org.eurekastreams.server.service.actions.strategies.activity.ShareVerbValidator">
        <constructor-arg ref="bulkActivitiesMapper" />
        <constructor-arg ref="transactionManager" />
        <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
    </bean>

    <util:map id="verbValidators" map-class="java.util.HashMap">
        <entry key="POST">
            <ref bean="postVerbValidator" />
        </entry>
        <entry key="SHARE">
            <ref bean="shareVerbValidator" />
        </entry>
    </util:map>

    <!--
        Beans for all of the Object Validators that will be added to the
        ObjectValidator HashMap
    -->
    <bean id="noteObjectValidator"
        class="org.eurekastreams.server.service.actions.strategies.activity.NoteObjectValidator">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
                <constructor-arg value="content" />
                <constructor-arg value="java.lang.String" />
                <constructor-arg value="Content is required for Note Activities." />
                <property name="mapParameterValidatorDecorator">
                    <bean
                        class="org.eurekastreams.server.service.actions.strategies.MapParameterLengthValidator">
                        <constructor-arg value="content" />
                        <constructor-arg value="250" />
                        <constructor-arg
                            value="Note Activity Content can only be 250 characters or less." />
                    </bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="bookmarkObjectValidator"
        class="org.eurekastreams.server.service.actions.strategies.activity.BookmarkObjectValidator">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
                <constructor-arg value="targetUrl" />
                <constructor-arg value="java.lang.String" />
                <constructor-arg value="TargetUrl is required for Bookmark Activities." />
                <property name="mapParameterValidatorDecorator">
                    <bean
                        class="org.eurekastreams.server.service.actions.strategies.MapParameterLengthValidator">
                        <constructor-arg value="content" />
                        <constructor-arg value="250" />
                        <constructor-arg
                            value="Bookmark Activity Content can only be 250 characters or less." />
                        <property name="mapParameterValidatorDecorator">
                            <bean
                                class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
                                <constructor-arg value="targetTitle" />
                                <constructor-arg value="java.lang.String" />
                                <constructor-arg
                                    value="TargetTitle is required for Bookmark Activities." />
                            </bean>
                        </property>
                    </bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <util:map id="objectValidators" map-class="java.util.HashMap">
        <entry key="NOTE">
            <ref bean="noteObjectValidator" />
        </entry>
        <entry key="BOOKMARK">
            <ref bean="bookmarkObjectValidator" />
        </entry>
    </util:map>

    <bean id="personActorStrategy"
        class="org.eurekastreams.server.service.actions.strategies.activity.PersonActorRetrievalStrategy" />

    <!--
        ****************************************************************************************
        DIRECTORY BROWSING
        ****************************************************************************************
    -->

    <!-- Factory for building OrgChildGetters -->
    <bean id="orgChildrenGetterFactory"
        class="org.eurekastreams.server.service.actions.strategies.directory.OrgChildrenGetterFactory" />

    <!-- Strategy to populate additional fields after a search request -->
    <bean id="searchResultAdditionalPropertyPopulator"
        class="org.eurekastreams.server.service.actions.strategies.directory.SearchResultAdditionalPropertyPopulator">
        <constructor-arg ref="fieldMatchDeterminer" />
    </bean>
 	
</beans>
 