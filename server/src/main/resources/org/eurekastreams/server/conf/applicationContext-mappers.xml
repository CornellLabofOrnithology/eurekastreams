<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd">


	<!--
		**** Beans useful for multiple mappers (particularly in chained
		mappers) ****
	-->

	<!-- Results combiner - just returns the first non-null value -->
	<bean id="nonNullResultsCombiner"
		class="org.eurekastreams.server.persistence.mappers.chained.NonNullResultsCombiner" />

	<bean name="hashTagExtractor"
		class="org.eurekastreams.server.domain.strategies.HashTagExtractor" />

	<bean name="activityContentExtractor"
		class="org.eurekastreams.server.persistence.mappers.stream.ActivityContentExtractor" />
		
	<!--
		Mapper to get the hash tags from the database - insert if not already
		in the database
	-->
	<bean id="getHashTagsFromDatabaseMapper"
		class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		<constructor-arg>
			<!-- Partial database mapper -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.db.PartialHashTagDbMapper" />
		</constructor-arg>

		<constructor-arg>
			<!--
				Hashtag generation mapper to create new ones if not found in the
				database
			-->
			<bean
				class="org.eurekastreams.server.persistence.mappers.HashTagBuilderMapper" />
		</constructor-arg>

		<constructor-arg>
			<!--
				Combiner to put together the generated and existing hashtags
				together
			-->
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.CollectionCombiner" />
		</constructor-arg>

		<constructor-arg>
			<!-- Database refresher -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.db.HashTagDbRefreshStrategy" />
		</constructor-arg>
	</bean>
	<!-- ****  **** -->

	<!--
		Wire up the entity updaters for person, domain group, organization -
		handles onPostUpdate, onPostPersist
	-->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject">
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.CacheInitializer" />
		</property>
		<property name="targetMethod" value="wireCacheUpdaters" />
		<property name="arguments">
			<list>
				<ref bean="domainGroupCacheLoader" />
				<ref bean="organizationCacheLoader" />
				<ref bean="personCacheLoader" />
			</list>
		</property>
	</bean>

	<bean id="getAllPluginsMapper"
		class="org.eurekastreams.server.persistence.mappers.db.GetAllPluginsMapper" />

	<bean id="getFeedSubscriptionsByEntity"
		class="org.eurekastreams.server.persistence.mappers.db.GetFeedSubscriptionsByEntity" />

	<bean id="getFeedSubscriberOrCreateMapper"
		class="org.eurekastreams.server.persistence.mappers.db.GetFeedSubscriberOrCreateMapper" />

	<bean id="getFeedByUrlOrCreateMapper"
		class="org.eurekastreams.server.persistence.mappers.db.GetFeedByUrlOrCreateMapper" />

	<bean id="getRefreshableFeedsMapper"
		class="org.eurekastreams.server.persistence.mappers.GetRefreshableFeedsMapper" />

	<bean id="setRefreshableFeedsAsPendingMapper"
		class="org.eurekastreams.server.persistence.mappers.SetRefreshableFeedsAsPending" />

	<bean id="deleteByIdMapper"
		class="org.eurekastreams.server.persistence.mappers.DeleteByIdMapper" />

	<bean id="addBufferedActivitiesToCache"
		class="org.eurekastreams.server.persistence.mappers.cache.AddBufferedActivitiesToCache">
		<constructor-arg ref="bulkActivitiesMapper" />
		<constructor-arg ref="memcachedCache" />
		<constructor-arg ref="getCompositeStreamIdsByAssociatedActivity" />
	</bean>

	<bean id="jpaFeedReaderMapper" class="org.eurekastreams.server.persistence.FeedReaderMapper"></bean>

	<bean id="searchPeopleAndGroupsByPrefixMapper"
		class="org.eurekastreams.server.persistence.mappers.SearchPeopleAndGroupsByPrefix">
		<constructor-arg value="20" /> <!-- default max results -->
		<constructor-arg ref="groupPersonSearchRequestBuilder" />
		<constructor-arg
			ref="getPrivateCoordinatedAndFollowedGroupIdsForUserMapper" />
		<constructor-arg ref="bulkPeopleByAccountIdMapper" />
		<constructor-arg value="false" />
	</bean>

	<bean id="searchGroupsByPrefixMapper"
		class="org.eurekastreams.server.persistence.mappers.SearchPeopleAndGroupsByPrefix">
		<constructor-arg value="20" /> <!-- default max results -->
		<constructor-arg ref="groupPersonSearchRequestBuilder" />
		<constructor-arg
			ref="getPrivateCoordinatedAndFollowedGroupIdsForUserMapper" />
		<constructor-arg ref="bulkPeopleByAccountIdMapper" />
		<constructor-arg value="true" />
	</bean>

	<bean id="getPendingDomainGroupsForOrg"
		class="org.eurekastreams.server.persistence.mappers.GetPendingDomainGroupsForOrg">
		<constructor-arg>
			<ref bean="organizationHierarchyCache" />
		</constructor-arg>
		<property name="getPeopleByIdsMapper" ref="bulkPeopleMapper" />
	</bean>

	<bean id="activityOrCombiner"
		class="org.eurekastreams.server.persistence.mappers.chained.ListColliderAdapter">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.service.actions.strategies.activity.OrSortedListCollider" />
		</constructor-arg>
		<constructor-arg value="10000" />
	</bean>

	<bean id="getOrganizationLeaderIdsByOrgId"
		class="org.eurekastreams.server.persistence.mappers.cache.GetOrganizationLeaderIdsByOrgId">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="findByIdMapper"
		class="org.eurekastreams.server.persistence.mappers.FindByIdMapper">
		<property name="queryOptimizer" ref="queryOptimizer" />
	</bean>

	<bean
		id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITY_SECURITY_BY_ID"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
		
    <bean
        id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.PERSON_BY_ID"
        class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />  
        
    <bean
        id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.PERSON_BY_ACCOUNT_ID"
        class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" /> 
        
    <bean
        id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.PERSON_BY_OPEN_SOCIAL_ID"
        class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />	
        
    <bean
        id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.PEOPLE_FOLLOWED_BY_PERSON"
        class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />	
                
    <bean
        id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.GROUP_BY_ID"
        class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
                
    <bean
        id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.GROUP_BY_SHORT_NAME"
        class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
        
    <bean
        id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.FOLLOWERS_BY_PERSON"
        class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />  
        
    <bean
        id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.GROUPS_FOLLOWED_BY_PERSON"
        class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" /> 
        
    <bean
        id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.FOLLOWERS_BY_GROUP"
        class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />        
                                         
	<bean
		id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.POPULAR_HASH_TAGS_BY_STREAM_TYPE_AND_SHORT_NAME"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />

	<bean id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITY_IDS_FOR_ORG_BY_SHORTNAME_RECURSIVE"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />
		
	<bean id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.EVERYONE_ACTIVITY_IDS"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />

	<bean id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITIES_BY_FOLLOWING"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />

	<!--
		Mapper that goes to cache for the popular hashtags for a stream.  If it exists, it checks how long ago it was generated. 
		If it was too long ago, it throws the cached value away and falls back to the database, then stores that result in cache.
	 -->
	<bean id="findPopularHashTagsForStreamMapper"
		class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		
		<!-- CACHE COMPONENT -->
		<constructor-arg>
			
			<!-- Cache mapper isn't partial results - wrap it -->
			<bean class="org.eurekastreams.server.persistence.mappers.chained.PartialMapperWrapper">
				<constructor-arg>
				
					<!-- Get the value from cache, and check to make sure it's not too old
-->
					<bean class="org.eurekastreams.server.persistence.mappers.StreamPopularHashTagsMapper">		
						
						<!-- Use the reusable single-value cache mapper to get the value -->
						<constructor-arg>
							<bean class="org.eurekastreams.server.persistence.mappers.cache.SingleValueCacheMapper">
								<!-- Transformer from stream populator hash tags request to cache key suffix
-->
								<constructor-arg>
									<bean class="org.eurekastreams.server.persistence.mappers.cache.StreamPopularHashTagsRequestCacheKeySuffixTransformer" />
								</constructor-arg>
							
								<!-- Cache Key Prefix -->				
								<constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.POPULAR_HASH_TAGS_BY_STREAM_TYPE_AND_SHORT_NAME" />
								
								<property name="cache" ref="memcachedCache" />
							</bean>
						</constructor-arg>
						
						<!-- Number of minutes that we keep popular hashtags in cache -->
						<constructor-arg value="${eureka.stream.popularhashtags.cachetimeoutinminutes}" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
		
		<!-- DATABASE COMPONENT -->
		<constructor-arg>
			<!-- Database mapper to fall back on if not found in cache -->
			<bean class="org.eurekastreams.server.persistence.mappers.db.StreamPopularHashTagsDbMapper">
			
				<!-- Number of minutes to look back for popular hashtags -->
				<constructor-arg value="${eureka.stream.popularhashtags.activitywindowinminutes}" />
				
				<!-- Max number of hashtags to return -->
				<constructor-arg value="${eureka.stream.popularhashtags.count}" />
			</bean>
		</constructor-arg>

		<!-- RESULTS COMBINER - pick the non-null one -->
		<constructor-arg ref="nonNullResultsCombiner" />
		
		<!-- CACHE REFRESHER -->
		<constructor-arg>
			<bean class="org.eurekastreams.server.persistence.mappers.cache.SingleValueCacheRefreshStrategy">
				<!-- Cache Key Prefix -->				
				<constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.POPULAR_HASH_TAGS_BY_STREAM_TYPE_AND_SHORT_NAME" />

				<!-- Cache key suffix transformer -->
				<constructor-arg>
					<bean
						class="org.eurekastreams.server.persistence.mappers.cache.StreamPopularHashTagsRequestCacheKeySuffixTransformer" />
				</constructor-arg>

				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>
	</bean>



    <bean id="findPopularHashTagsForAllGroupsJoinedMapper"
        class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
        
        <!-- CACHE COMPONENT -->

        <constructor-arg>
            <!-- Cache mapper isn't partial results - wrap it -->
                            <bean
                                class="org.eurekastreams.server.persistence.mappers.cache.PartialCacheResultsMapper">
                                <constructor-arg>
                                    <bean
                                        class="org.eurekastreams.server.persistence.mappers.cache.StreamPopularHashTagsRequestCacheKeySuffixTransformer" />
                                </constructor-arg>
                                <constructor-arg
                                    ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.POPULAR_HASH_TAGS_BY_STREAM_TYPE_AND_SHORT_NAME" />
                               <constructor-arg value="False" />
                                <property name="cache" ref="memcachedCache" />
                             </bean>
         </constructor-arg>
        <!-- DATABASE COMPONENT -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.chained.MultiRequestMapperWrapper">
                    <constructor-arg>
                         <ref bean="findPopularHashTagsForStreamMapper" />
                    </constructor-arg>
            </bean>
        </constructor-arg>

        <constructor-arg>
            <bean
                class="org.eurekastreams.server.persistence.mappers.chained.CollectionCombiner" />
        </constructor-arg>
        
        <!-- CACHE REFRESHER -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.cache.NullCacheRefresher" />
        </constructor-arg>
    </bean>

	<bean id="bulkActivitySecurityMapper"
		class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.PartialCacheResultsMapper">
				<constructor-arg>
					<bean
						class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
				</constructor-arg>
				<constructor-arg
					ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITY_SECURITY_BY_ID" />
				<constructor-arg value="False" />
				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>

		<constructor-arg>
			<!-- Database mapper to fall back on if not found in cache -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
				<constructor-arg>
					<bean
						class="org.eurekastreams.server.persistence.mappers.db.BulkActivitySecurityDbMapper" />
				</constructor-arg>
		
				<constructor-arg>
					<bean
						class="org.eurekastreams.server.persistence.mappers.BulkDeletedActivitySecurityMapper" />
				</constructor-arg>
		
				<constructor-arg>
					<bean
						class="org.eurekastreams.server.persistence.mappers.chained.CollectionCombiner" />
				</constructor-arg>
		
		        <constructor-arg>
		            <bean class="org.eurekastreams.server.persistence.mappers.cache.NullCacheRefresher" />
		        </constructor-arg>
			</bean>		
		</constructor-arg>

		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.CollectionCombiner" />
		</constructor-arg>

		<constructor-arg>
			<!-- Cache refresher -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.BulkActivitySecurityRefresher">
				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>
	</bean>

	<bean id="getUserStreamsMapper" class="org.eurekastreams.server.persistence.mappers.db.GetUserStreamsDbMapper" />


	<bean
		id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ENTITY_STREAM_BY_SCOPE_ID"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />

	<bean id="bulkActivityStreamsMapper"
		class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.PartialCacheResultsMapper">
				<constructor-arg>
					<bean
						class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
				</constructor-arg>
				<constructor-arg
					ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ENTITY_STREAM_BY_SCOPE_ID" />
				<constructor-arg value="True" />
				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>

		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.db.BulkActivityStreamsDbMapper">
					<property name="maxItems" value="10000" />
			</bean>

		</constructor-arg>

		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.CollectionCombiner" />
		</constructor-arg>

		<constructor-arg>
			<bean class="org.eurekastreams.server.persistence.mappers.cache.SetKeyedCollectionCacheMapper">
				<constructor-arg
					ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ENTITY_STREAM_BY_SCOPE_ID" />
				<!-- Cache Key Prefix -->				
				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>
	</bean>

	<bean id="parentOrgActivityIdMapper"
		class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.PartialMapperWrapper">
				<constructor-arg>
						<bean class="org.eurekastreams.server.persistence.mappers.cache.SingleListValueCacheMapper">
						<!-- Transformer from org short name to org short name -->
						<constructor-arg>
							<bean class="org.eurekastreams.server.persistence.mappers.cache.LowerCaseCacheKeySuffixTransformer" />
						</constructor-arg>
					
						<!-- Cache Key Prefix -->				
						<constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITY_IDS_FOR_ORG_BY_SHORTNAME_RECURSIVE" />
						
						<property name="cache" ref="memcachedCache" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>

		<constructor-arg>
			<!-- Database mapper to fall back on if not found in cache -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.db.OrgActivityIdsDbMapper">
				<property name="descendantOrganizationStrategy" ref="descendantOrgStrategy" />
			</bean>
		</constructor-arg>

		<constructor-arg>
			<!-- Results combiner - just returns the first non-null value -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.NonNullResultsCombiner" />
		</constructor-arg>

		<constructor-arg>
			<!-- Cache refresher -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.OrgActivityIdsRefresher">
				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>
	</bean>

	<bean id="parentOrgActivityIdMapper_FORCE_REFRESH"
		class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		<constructor-arg ref="nullResultPartialMapper" />

		<constructor-arg>
			<!-- Database mapper to fall back on if not found in cache -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.db.OrgActivityIdsDbMapper">
				<property name="descendantOrganizationStrategy" ref="descendantOrgStrategy" />
			</bean>
		</constructor-arg>

		<constructor-arg>
			<!-- Results combiner - just returns the first non-null value -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.NonNullResultsCombiner" />
		</constructor-arg>

		<constructor-arg>
			<!-- Cache refresher -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.OrgActivityIdsRefresher">
				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>
	</bean>

	<bean id="findSystemSettings"
		class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		<constructor-arg>
			<!--
				Wrap the System Settings cache mapper with a partial mapper wrapper
			-->
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.PartialMapperWrapper">
				<constructor-arg>
					<!-- Cache mapper to get the system settings -->
					<bean
						class="org.eurekastreams.server.persistence.mappers.cache.FindSystemSettingsCacheDomainMapperImpl">
						<property name="cache" ref="memcachedCache" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>

		<constructor-arg>
			<!-- Database mapper to fall back on if not found in cache -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.db.FindSystemSettingsDbDomainMapperImpl">
				<property name="queryOptimizer" ref="queryOptimizer" />
			</bean>
		</constructor-arg>

		<constructor-arg>
			<!-- Results combiner - just returns the first non-null value -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.NonNullResultsCombiner" />
		</constructor-arg>

		<constructor-arg>
			<!-- Cache refresher -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.RefreshSystemSettingsCacheMapperImpl">
				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>
	</bean>


	<bean id="findSystemSettingsFromDatabase"
		class="org.eurekastreams.server.persistence.mappers.db.FindSystemSettingsDbDomainMapperImpl">
		<!--
			Mapper to get the system settings straight from the database - needed
			for updating it.
		-->
		<property name="queryOptimizer" ref="queryOptimizer" />
	</bean>

	<bean id="getTutorialVideos"
		class="org.eurekastreams.server.persistence.mappers.db.GetTutorialVideos">
		<property name="queryOptimizer" ref="queryOptimizer" />
	</bean>

	<bean id="saveOrganizationCoordinatorIdsToCache"
		class="org.eurekastreams.server.persistence.mappers.cache.SaveOrganizationCoordinatorIdsToCache">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="saveDomainGroupCoordinatorsListToCacheMapper"
		class="org.eurekastreams.server.persistence.mappers.cache.SaveDomainGroupCoordinatorsListToCache">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="textQueryParserBuilder" class="org.eurekastreams.commons.search.QueryParserBuilder"
		scope="prototype">
		<constructor-arg value="nothing" />
		<constructor-arg>
			<bean class="org.eurekastreams.commons.search.analysis.TextStemmerAnalyzer" />
		</constructor-arg>
	</bean>

	<bean id="luceneSearchMapper"
		class="org.eurekastreams.server.persistence.mappers.LuceneSearchMapper">
		<property name="queryOptimizer" ref="queryOptimizer" />
		<property name="queryBuilder" ref="textQueryParserBuilder" />

	</bean>

	<bean id="findLinkInformationByUrlMapper"
		class="org.eurekastreams.server.persistence.mappers.FindLinkInformationByUrl">
		<property name="queryOptimizer" ref="queryOptimizer" />
		<property name="expirationInMilliseconds" value="7200000" />
	</bean>

	<bean id="getFollowedEntitiesByPrefix"
		class="org.eurekastreams.server.persistence.mappers.GetFollowedEntitiesByPrefix">
		<property name="getPeopleByAccountIdsMapper" ref="bulkPeopleByAccountIdMapper" />
		<property name="getFollowedPersonIdsMapper" ref="getFollowedPersonIds" />
		<property name="getFollowedGroupIdsMapper" ref="getFollowedGroupIds" />
	</bean>

	<bean id="insertStarredActivity"
		class="org.eurekastreams.server.persistence.mappers.InsertStarredActivity">
		<constructor-arg ref="getStarredActivityIds" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="deleteStarredActivity"
		class="org.eurekastreams.server.persistence.mappers.DeleteStarredActivity">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="insertLikedActivity"
		class="org.eurekastreams.server.persistence.mappers.InsertLikedActivity">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="deleteLikedActivity"
		class="org.eurekastreams.server.persistence.mappers.DeleteLikedActivity">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="getEveryoneActivityDbMapper"
		class="org.eurekastreams.server.persistence.mappers.db.GetEveryoneActivityDbMapper">
	</bean>
	<bean id="refreshFollowedByActivitiesCacheMapper"
		class="org.eurekastreams.server.persistence.mappers.cache.RefreshFollowedByActivitiesCacheMapper">
		<property name="cache" ref="memcachedCache" />
	</bean>
	<bean id="getFollowedByActivitiesDbMapper"
		class="org.eurekastreams.server.persistence.mappers.db.GetFollowedByActivitiesDbMapper">
		<constructor-arg ref="followedActivityIdsLoader" />
		<constructor-arg value="10" />
	</bean>

	<bean id="getFollowedByActivities"
		class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		<constructor-arg>
			<!-- Wrap the cache mapper with a partial mapper wrapper -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.PartialMapperWrapper">
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.cache.SingleListValueCacheMapper">
						<constructor-arg>
							<bean class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
						</constructor-arg>
						<constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITIES_BY_FOLLOWING" />
						<property name="cache" ref="memcachedCache" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>

		<!-- Database mapper to fall back on if not found in cache -->
		<constructor-arg ref="getFollowedByActivitiesDbMapper" />

		<constructor-arg>
			<!-- Results combiner - just returns the first non-null value -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.NonNullResultsCombiner" />
		</constructor-arg>

		<!-- Cache refresher -->
		<constructor-arg ref="refreshFollowedByActivitiesCacheMapper" />
	</bean>
	
	<bean id="getFollowedByActivities_FORCE_REFRESH"
		class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		<constructor-arg ref="nullResultPartialMapper" />

		<!-- Database mapper to fall back on if not found in cache -->
		<constructor-arg ref="getFollowedByActivitiesDbMapper" />

		<constructor-arg>
			<!-- Results combiner - just returns the first non-null value -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.NonNullResultsCombiner" />
		</constructor-arg>

		<!-- Cache refresher -->
		<constructor-arg ref="refreshFollowedByActivitiesCacheMapper" />
	</bean>
	
	<bean id="getGroupsByIdsMapper_FORCE_REFRESH" class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
        <!-- Cache Mapper -->
        <constructor-arg ref="nullResultPartialMapper"/>
        <!-- Database mapper to fall back on if not found in cache -->
        <constructor-arg ref="getGroupsByIdsDbMapper" />
        <!-- Data combiner -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.chained.CollectionCombiner" />
        </constructor-arg>        
        <!-- Cache refresher -->
        <constructor-arg ref="groupCacheRefresher"/>                        
    </bean> 
	
	<bean id="getFollowedGroupIdsForPersonByIdMapper_FORCE_REFRESH" class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
        <!-- Cache Mapper -->
        <constructor-arg ref="nullResultPartialMapper"/>
        <!-- Database mapper to fall back on if not found in cache -->
        <constructor-arg ref="getFollowedGroupIdsForPersonByIdDbMapper" />
        <!-- Data combiner -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.chained.NonNullResultsCombiner" />
        </constructor-arg>        
        <!-- Cache refresher -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.cache.SingleListValueCacheRefreshStrategy">
                <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.GROUPS_FOLLOWED_BY_PERSON" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
                </constructor-arg>
                <property name="cache" ref="memcachedCache" />
            </bean> 
        </constructor-arg>                       
    </bean>
    
    <bean id="getFollowerPersonIdsForGroupByIdMapper_FORCE_REFRESH" class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
        <!-- Cache Mapper -->
        <constructor-arg ref="nullResultPartialMapper"/>
        <!-- Database mapper to fall back on if not found in cache -->
        <constructor-arg ref="getFollowerPersonIdsForGroupByIdDbMapper" />
        <!-- Data combiner -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.chained.NonNullResultsCombiner" />
        </constructor-arg>        
        <!-- Cache refresher -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.cache.SingleListValueCacheRefreshStrategy">
                <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.FOLLOWERS_BY_GROUP" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
                </constructor-arg>
                <property name="cache" ref="memcachedCache" />
            </bean> 
        </constructor-arg>                       
    </bean>    
	

    <bean id="getFollowedPersonIdsForPersonByIdMapper" class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
        <!-- Cache Mapper -->
        <constructor-arg ref="getFollowedPersonIdsForPersonByIdCacheMapper"/>
        <!-- Database mapper to fall back on if not found in cache -->
        <constructor-arg ref="getFollowedPersonIdsForPersonByIdDbMapper" />
        <!-- Data combiner -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.chained.NonNullResultsCombiner" />
        </constructor-arg>        
        <!-- Cache refresher -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.cache.SingleListValueCacheRefreshStrategy">
                <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.PEOPLE_FOLLOWED_BY_PERSON" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
                </constructor-arg>
                <property name="cache" ref="memcachedCache" />
            </bean> 
        </constructor-arg>                       
    </bean>
        
    <bean id="getFollowedPersonIdsForPersonByIdMapper_FORCE_REFRESH" class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
        <!-- Cache Mapper -->
        <constructor-arg ref="nullResultPartialMapper"/>
        <!-- Database mapper to fall back on if not found in cache -->
        <constructor-arg ref="getFollowedPersonIdsForPersonByIdDbMapper" />
        <!-- Data combiner -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.chained.NonNullResultsCombiner" />
        </constructor-arg>        
        <!-- Cache refresher -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.cache.SingleListValueCacheRefreshStrategy">
                <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.PEOPLE_FOLLOWED_BY_PERSON" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
                </constructor-arg>
                <property name="cache" ref="memcachedCache" />
            </bean> 
        </constructor-arg>                        
    </bean> 
    
    <bean id="getFollowedPersonIdsForPersonByIdCacheMapper" class="org.eurekastreams.server.persistence.mappers.cache.PartialCacheResultsMapper">
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
        </constructor-arg>
        <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.PEOPLE_FOLLOWED_BY_PERSON" />
        <!-- Is list of lists flag -->
        <constructor-arg value="False" />
        <property name="cache" ref="memcachedCache" />
    </bean> 
    
    <bean id="getFollowerPersonIdsForPersonByIdMapper" class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
        <!-- Cache Mapper -->
        <constructor-arg ref="getFollowerPersonIdsForPersonByIdCacheMapper"/>
        <!-- Database mapper to fall back on if not found in cache -->
        <constructor-arg ref="getFollowerPersonIdsForPersonByIdDbMapper" />
        <!-- Data combiner -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.chained.NonNullResultsCombiner" />
        </constructor-arg>        
        <!-- Cache refresher -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.cache.SingleListValueCacheRefreshStrategy">
                <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.FOLLOWERS_BY_PERSON" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
                </constructor-arg>
                <property name="cache" ref="memcachedCache" />
            </bean> 
        </constructor-arg>                       
    </bean>
        
    <bean id="getFollowerPersonIdsForPersonByIdMapper_FORCE_REFRESH" class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
        <!-- Cache Mapper -->
        <constructor-arg ref="nullResultPartialMapper"/>
        <!-- Database mapper to fall back on if not found in cache -->
        <constructor-arg ref="getFollowerPersonIdsForPersonByIdDbMapper" />
        <!-- Data combiner -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.chained.NonNullResultsCombiner" />
        </constructor-arg>        
        <!-- Cache refresher -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.cache.SingleListValueCacheRefreshStrategy">
                <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.FOLLOWERS_BY_PERSON" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
                </constructor-arg>
                <property name="cache" ref="memcachedCache" />
            </bean> 
        </constructor-arg>                        
    </bean> 
    
    <bean id="getFollowerPersonIdsForPersonByIdCacheMapper" class="org.eurekastreams.server.persistence.mappers.cache.PartialCacheResultsMapper">
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
        </constructor-arg>
        <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.FOLLOWERS_BY_PERSON" />
        <!-- Is list of lists flag -->
        <constructor-arg value="False" />
        <property name="cache" ref="memcachedCache" />
    </bean>

    <bean id="getPersonsByIdsMapper" class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
        <!-- Cache Mapper -->
        <constructor-arg ref="getPersonsByIdsCacheMapper"/>
        <!-- Database mapper to fall back on if not found in cache -->
        <constructor-arg ref="getPersonsByIdsDBMapper" />
        <!-- Data combiner -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.chained.CollectionCombiner" />
        </constructor-arg>        
        <!-- Cache refresher -->
        <constructor-arg ref="personCacheRefresher"/>                        
    </bean>
    
    <bean id="getPersonsByIdsMapper_FORCE_REFRESH" class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
        <!-- Cache Mapper -->
        <constructor-arg ref="nullResultPartialMapper"/>
        <!-- Database mapper to fall back on if not found in cache -->
        <constructor-arg ref="getPersonsByIdsDBMapper" />
        <!-- Data combiner -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.chained.CollectionCombiner" />
        </constructor-arg>        
        <!-- Cache refresher -->
        <constructor-arg ref="personCacheRefresher"/>                        
    </bean>    
    
    <bean id="getPersonsByIdsCacheMapper" class="org.eurekastreams.server.persistence.mappers.cache.PartialCacheResultsMapper">
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
        </constructor-arg>
        <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.PERSON_BY_ID" />
        <!-- Is list of lists flag -->
        <constructor-arg value="False" />
        <property name="cache" ref="memcachedCache" />
    </bean>
    
    <bean id="personCacheRefresher" class="org.eurekastreams.server.persistence.mappers.cache.MultiRefreshCacheRefreshStrategy">
        <constructor-arg>
            <list>
                <ref local="personByIdRefresher" />
                <ref local="personByAccountIdRefresher" />
                <ref local="personByOpenSocialIdRefresher" />
            </list>
        </constructor-arg>
    </bean>       
    
    <bean id="personByIdRefresher" class="org.eurekastreams.server.persistence.mappers.cache.MultiValueCacheRefreshStrategy">
        <!-- Prefix -->
        <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.PERSON_BY_ID" />
        <!-- Suffix Transformer -->
        <constructor-arg ref="personToIdTransformer"/>
         <!-- Value Transformer -->
        <constructor-arg ref="passThroughTransformer"/>
        <!-- Cache -->
        <constructor-arg ref="memcachedCache" />        
    </bean>     
    
    <bean id="personByAccountIdRefresher" class="org.eurekastreams.server.persistence.mappers.cache.MultiValueCacheRefreshStrategy">
        <!-- Prefix -->
        <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.PERSON_BY_ACCOUNT_ID" />
        <!-- Suffix Transformer -->
        <constructor-arg ref="personToAccountIdTransformer"/>
         <!-- Value Transformer -->
        <constructor-arg ref="personToIdTransformer"/>
        <!-- Cache -->
        <constructor-arg ref="memcachedCache" />      
    </bean>   
    
    <bean id="personByOpenSocialIdRefresher" class="org.eurekastreams.server.persistence.mappers.cache.MultiValueCacheRefreshStrategy">
        <!-- Prefix -->
        <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.PERSON_BY_OPEN_SOCIAL_ID" />
        <!-- Suffix Transformer -->
        <constructor-arg ref="personToOpenSocialIdTransformer"/>
         <!-- Value Transformer -->
        <constructor-arg ref="personToIdTransformer"/>
        <!-- Cache -->
        <constructor-arg ref="memcachedCache" />      
    </bean> 
    
    <bean id="groupCacheRefresher" class="org.eurekastreams.server.persistence.mappers.cache.MultiRefreshCacheRefreshStrategy">
        <constructor-arg>
            <list>
                <ref local="groupByIdRefresher" />
                <ref local="groupByShortNameRefresher" />
            </list>
        </constructor-arg>
    </bean>  
    
    <bean id="groupByIdRefresher" class="org.eurekastreams.server.persistence.mappers.cache.MultiValueCacheRefreshStrategy">
        <!-- Prefix -->
        <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.GROUP_BY_ID" />
        <!-- Suffix Transformer -->
        <constructor-arg ref="groupToIdTransformer"/>
         <!-- Value Transformer -->
        <constructor-arg ref="passThroughTransformer"/>
        <!-- Cache -->
        <constructor-arg ref="memcachedCache" />      
    </bean>
    
    <bean id="groupByShortNameRefresher" class="org.eurekastreams.server.persistence.mappers.cache.MultiValueCacheRefreshStrategy">
        <!-- Prefix -->
        <constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.GROUP_BY_SHORT_NAME" />
        <!-- Suffix Transformer -->
        <constructor-arg ref="groupToShortNameTransformer"/>
         <!-- Value Transformer -->
        <constructor-arg ref="groupToIdTransformer"/>
        <!-- Cache -->
        <constructor-arg ref="memcachedCache" />      
    </bean> 
    
    <bean id="groupToIdTransformer" class="org.eurekastreams.server.persistence.mappers.cache.GroupToIdTransformer" />
    
    <bean id="groupToShortNameTransformer" class="org.eurekastreams.server.persistence.mappers.cache.GroupToShortNameTransformer" />
    
    <bean id="personToIdTransformer" class="org.eurekastreams.server.persistence.mappers.cache.PersonToIdTransformer" />
    
    <bean id="personToAccountIdTransformer" class="org.eurekastreams.server.persistence.mappers.cache.PersonToAccountIdTransformer" />
    
    <bean id="personToOpenSocialIdTransformer" class="org.eurekastreams.server.persistence.mappers.cache.PersonToOpenSocialIdTransformer" />
    
    <bean id="passThroughTransformer" class="org.eurekastreams.server.persistence.mappers.cache.PassThroughTransformer" />	
    
    <bean id="nullResultPartialMapper" class="org.eurekastreams.server.persistence.mappers.chained.PartialMapperWrapper">
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.db.NullMapper">
            </bean>
        </constructor-arg>
    </bean>
    
	<!-- Organization Hierarchy Cache Loader -->
	<bean id="organizationCacheLoader"
		class="org.eurekastreams.server.persistence.mappers.cache.OrganizationHierarchyCacheLoader">
		<property name="cache" ref="memcachedCache" />
		<property name="organizationMapper" ref="bulkOrganizationsMapper" />
	</bean>

	<bean id="orgParentHierarchyCacheCleaner"
		class="org.eurekastreams.server.persistence.mappers.cache.OrgParentHierarchyCacheCleaner">
		<property name="cache" ref="memcachedCache" />
		<property name="getRecursiveParentOrgIdsMapper" ref="getRecursiveParentOrgIdsMapper" />
	</bean>

	<bean id="getStreamScopeById"
		class="org.eurekastreams.server.persistence.mappers.GetStreamScopeById" />

	<bean id="getStreamScopeProxyById"
		class="org.eurekastreams.server.persistence.mappers.GetStreamScopeProxyById" />

	<!--
		Domain Group Cache Loader - will be injected into actions/mappers that
		need to update the cache
	-->
	<bean id="domainGroupCacheLoader"
		class="org.eurekastreams.server.persistence.mappers.cache.DomainGroupCacheLoader">
		<constructor-arg ref="domainGroupQueryStrategy" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<!-- Person Cache Loader -->
	<bean id="personCacheLoader"
		class="org.eurekastreams.server.persistence.mappers.cache.PersonCacheLoader">
		<constructor-arg ref="personQueryStrategy" />
		<constructor-arg ref="getRelatedOrganizationIdsByPersonId" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="followedActivityIdsLoader"
		class="org.eurekastreams.server.persistence.mappers.cache.FollowedActivityIdsLoaderImpl" />
		
	<bean id="activityIdSearchPageFetcherFactory"
		class="org.eurekastreams.server.search.stream.ActivityIdSearchPageFetcherFactory">
		<constructor-arg value="5" />
	</bean>

	<bean id="unstemmedActivityResultsQueryBuilder" class="org.eurekastreams.commons.search.QueryParserBuilder"
		scope="prototype">
		<constructor-arg value="_hibernate_class" />
		<constructor-arg>
			<bean class="org.apache.lucene.analysis.WhitespaceAnalyzer" />
		</constructor-arg>
	</bean>

	<bean id="luceneActivityDataSource"
		class="org.eurekastreams.server.service.actions.strategies.activity.datasources.LuceneDataSource">
		<!-- DataSource for searching activities -->

		<constructor-arg>
			<bean
				class="org.eurekastreams.commons.search.ProjectionSearchRequestBuilder">
				<property name="resultFields">
					<list>
						<value>id</value>
					</list>
				</property>
				<property name="resultTypes">
					<list>
						<value>org.eurekastreams.server.domain.stream.Activity
						</value>
					</list>
				</property>
				<property name="queryParserBuilder">
					<bean class="org.eurekastreams.commons.search.QueryParserBuilder">
						<constructor-arg value="content" />
						<constructor-arg>
							<bean
								class="org.eurekastreams.commons.search.analysis.HashTagTextStemmerSearchAnalyzer" />
						</constructor-arg>
					</bean>
				</property>
				<property name="advancedQueryParserBuilder">
					<bean class="org.eurekastreams.commons.search.QueryParserBuilder">
						<constructor-arg value="content" />
						<constructor-arg>
							<bean
								class="org.eurekastreams.commons.search.analysis.HashTagTextStemmerSearchAnalyzer" />
						</constructor-arg>
					</bean>
				</property>
				<property name="resultTransformer">
					<bean
						class="org.eurekastreams.commons.hibernate.SingleFieldResultTransformer">
						<property name="fieldName" value="id" />
					</bean>
				</property>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.commons.search.ProjectionSearchRequestBuilder">
				<property name="resultFields">
					<list>
						<value>id</value>
					</list>
				</property>
				<property name="resultTypes">
					<list>
						<value>org.eurekastreams.server.domain.stream.Activity
						</value>
					</list>
				</property>
				<property name="queryParserBuilder" ref="unstemmedActivityResultsQueryBuilder" />
				<property name="resultTransformer">
					<bean
						class="org.eurekastreams.commons.hibernate.SingleFieldResultTransformer">
						<property name="fieldName" value="id" />
					</bean>
				</property>
			</bean>
		</constructor-arg>
		<constructor-arg>
			<map>
				<entry key="keywords">
					<value>content</value>
				</entry>
				<entry key="authoredBy">
					<value>author</value>
				</entry>
			</map>
		</constructor-arg>
		<constructor-arg>
        	<map>
				<entry key="authoredBy">
					<bean 
                       class="org.eurekastreams.server.service.actions.strategies.activity.datasources.AuthoredByPersistenceRequestTransformer">
                       <constructor-arg ref="bulkPeopleByAccountIdMapper" />   
                       <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
                    </bean>
				</entry>
			</map>
		</constructor-arg>		
	</bean>

	<bean
		id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITY_BY_ID"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />

	<bean id="bulkActivitiesMapper"
		class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.PartialCacheResultsMapper">
				<constructor-arg>
					<bean
						class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
				</constructor-arg>
				<constructor-arg
					ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.ACTIVITY_BY_ID" />
				<constructor-arg value="False" />
				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>

		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.stream.BulkActivitiesDbMapper">
				<constructor-arg ref="bulkPeopleByAccountIdMapper" />
				<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
				<constructor-arg ref="getOrderedCommentIdsByActivityId" />
				<constructor-arg ref="getCommentsById" />
			</bean>
		</constructor-arg>

		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.CollectionCombiner" />
		</constructor-arg>

		<constructor-arg>
			<!-- Cache refresher -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.BulkActivityRefresher">
				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>
	</bean>

	<bean id="getOrgCoordinatorIdsFromDB"
		class="org.eurekastreams.server.persistence.mappers.db.GetOrgCoordinatorIds" />

	<bean id="getPrivateGroupsByUserId"
		class="org.eurekastreams.server.persistence.mappers.cache.GetPrivateGroupsByUserId">
		<constructor-arg ref="getPrivateGroupIdsCoordinatedByPersonMapper" />
		<constructor-arg ref="getOrgIdsDirectlyCoordinatedByPersonFromDB" />
		<constructor-arg ref="organizationHierarchyCache" />
		<constructor-arg ref="getPrivateGroupIdsUnderOrganizationsFromDB" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="addPrivateGroupIdToCachedCoordinatorAccessList"
		class="org.eurekastreams.server.persistence.mappers.cache.AddPrivateGroupIdToCachedCoordinatorAccessList">
		<constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="getPrivateGroupIdsUnderOrganizationsFromDB"
		class="org.eurekastreams.server.persistence.mappers.db.GetPrivateGroupIdsUnderOrganizations" />

	<bean id="getOrgIdsDirectlyCoordinatedByPersonFromDB"
		class="org.eurekastreams.server.persistence.mappers.cache.GetOrgIdsDirectlyCoordinatedByPerson">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="getOrgCoordinators"
		class="org.eurekastreams.server.persistence.mappers.GetOrgCoordinators">
		<property name="cache" ref="memcachedCache" />
		<constructor-arg ref="getOrgCoordinatorIdsFromDB" />
	</bean>

	<bean id="getRecursiveOrgCoordinators"
		class="org.eurekastreams.server.persistence.mappers.GetRecursiveOrgCoordinators">
		<constructor-arg ref="organizationHierarchyCache" />
		<constructor-arg ref="getOrgCoordinators" />
		<constructor-arg type="java.lang.Boolean" value="true" />
		<constructor-arg ref="bulkPeopleByAccountIdMapper" />
		<constructor-arg ref="memcachedCache" />
	</bean>

	<bean id="getRecursiveOrgCoordinatorsDownTree"
		class="org.eurekastreams.server.persistence.mappers.GetRecursiveOrgCoordinators">
		<constructor-arg ref="organizationHierarchyCache" />
		<constructor-arg ref="getOrgCoordinators" />
		<constructor-arg value="false" />
		<constructor-arg ref="bulkPeopleByAccountIdMapper" />
		<constructor-arg ref="memcachedCache" />
	</bean>

	<bean id="getAllPersonIdsWhoHaveGroupCoordinatorAccess"
		class="org.eurekastreams.server.persistence.mappers.GetAllPersonIdsWhoHaveGroupCoordinatorAccess">
		<constructor-arg ref="getCoordinatorIdsByGroupId" />
		<constructor-arg ref="bulkDomainGroupsMapper" />
		<constructor-arg ref="bulkOrganizationsByShortNameMapper" />
		<constructor-arg ref="getRecursiveOrgCoordinators" />
		<constructor-arg ref="bulkPeopleByAccountIdMapper" />
		<constructor-arg ref="memcachedCache" />
	</bean>

	<bean id="commentDeletePropertyStrategy"
		class="org.eurekastreams.server.persistence.strategies.CommentDeletePropertyStrategy">
		<constructor-arg ref="bulkPeopleByAccountIdMapper" />
		<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
		<constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
		<constructor-arg ref="getRecursiveOrgCoordinators" />
	</bean>

	<bean id="activityDeletePropertyStrategy"
		class="org.eurekastreams.server.persistence.strategies.ActivityDeletePropertyStrategy">
		<constructor-arg ref="bulkPeopleByAccountIdMapper" />
		<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
		<constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
		<constructor-arg ref="getRecursiveOrgCoordinators" />
	</bean>

	<bean id="personQueryStrategy"
		class="org.eurekastreams.server.persistence.strategies.PersonQueryStrategy" />

	<bean id="domainGroupQueryStrategy"
		class="org.eurekastreams.server.persistence.strategies.DomainGroupQueryStrategy" />

	<bean id="bulkOrganizationsMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.GetOrganizationsByIds">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="bulkPeopleMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.GetPeopleByIds">
		<constructor-arg ref="personQueryStrategy" />
		<constructor-arg ref="getRelatedOrganizationIdsByPersonId" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="bulkDomainGroupsMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.GetDomainGroupsByIds">
		<constructor-arg ref="domainGroupQueryStrategy" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="bulkPeopleByAccountIdMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.GetPeopleByAccountIds">
		<property name="cache" ref="memcachedCache" />
		<property name="bulkPeopleMapper" ref="bulkPeopleMapper" />
	</bean>

	<bean id="bulkPeopleByOpenSocialIdMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.GetPeopleByOpenSocialIds">
		<property name="cache" ref="memcachedCache" />
		<property name="bulkPeopleMapper" ref="bulkPeopleMapper" />
	</bean>

	<bean id="bulkOrganizationsByShortNameMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.GetOrganizationsByShortNames">
		<property name="cache" ref="memcachedCache" />
		<property name="bulkOrganizationsMapper" ref="bulkOrganizationsMapper" />
	</bean>

	<bean id="bulkDomainGroupsByShortNameMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.GetDomainGroupsByShortNames">
		<property name="cache" ref="memcachedCache" />
		<property name="bulkDomainGroupsMapper" ref="bulkDomainGroupsMapper" />
	</bean>

	<bean id="getOrderedCommentIdsByActivityId"
		class="org.eurekastreams.server.persistence.mappers.stream.GetOrderedCommentIdsByActivityId">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="getCommentsById"
		class="org.eurekastreams.server.persistence.mappers.stream.GetCommentsById">
		<constructor-arg ref="commentDTOPopulator" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="deleteActivityComment"
		class="org.eurekastreams.server.persistence.mappers.stream.DeleteActivityComment">
		<constructor-arg ref="getCommentsById" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="deleteActivity"
		class="org.eurekastreams.server.persistence.mappers.stream.DeleteActivity">
		<constructor-arg ref="bulkActivitiesMapper" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="deleteActivityCacheUpdateDAO"
		class="org.eurekastreams.server.persistence.mappers.stream.DeleteActivityCacheUpdate">
		<constructor-arg ref="getFollowerIds" />
		<constructor-arg ref="getGroupFollowerIds" />
		<constructor-arg ref="bulkPeopleByAccountIdMapper" />
		<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
		<constructor-arg ref="getPeopleWhoLikedActivity" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="getPersonIdsWithStarredActivity"
		class="org.eurekastreams.server.persistence.mappers.stream.GetPersonIdsWithStarredActivity">
		<property name="queryOptimizer" ref="queryOptimizer" />
	</bean>

	<bean id="getFollowedPersonIds"
		class="org.eurekastreams.server.persistence.mappers.stream.GetFollowedPersonIds">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="getFollowedGroupIds"
		class="org.eurekastreams.server.persistence.mappers.stream.GetFollowedGroupIds">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="reorderFollowedGroupIds"
		class="org.eurekastreams.server.persistence.mappers.stream.ReorderFollowedGroupIds">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="reorderStreams"
		class="org.eurekastreams.server.persistence.mappers.stream.ReorderStreams">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="getStarredActivityIds"
		class="org.eurekastreams.server.persistence.mappers.stream.GetStarredActivityIds">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean
		id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.LIKED_BY_PERSON_ID"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />

	<bean id="getLikedActivityIdsByUserId"
		class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.PartialCacheResultsMapper">
				<constructor-arg>
					<bean
						class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
				</constructor-arg>
				<constructor-arg
					ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.LIKED_BY_PERSON_ID" />
				<constructor-arg value="True" />
				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>

		<constructor-arg>
			<!-- Database mapper to fall back on if not found in cache -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.db.GetLikedActivityIdsByUserIdsDbMapper" />
		</constructor-arg>

		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.CollectionCombiner" />
		</constructor-arg>

		<constructor-arg>
			<!-- Cache refresher -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.SetKeyedCollectionCacheMapper">
				<constructor-arg
					ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.LIKED_BY_PERSON_ID" />
				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>
	</bean>


	<bean id="getFollowerIds"
		class="org.eurekastreams.server.persistence.mappers.stream.GetFollowerIds">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="getGroupFollowerIds"
		class="org.eurekastreams.server.persistence.mappers.stream.GetGroupFollowerIds">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="addCachedPersonFollower"
		class="org.eurekastreams.server.persistence.mappers.cache.AddCachedPersonFollower">
		<constructor-arg ref="getFollowedPersonIds" />
		<constructor-arg ref="getFollowerIds" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="addCachedGroupFollower"
		class="org.eurekastreams.server.persistence.mappers.cache.AddCachedGroupFollower">
		<constructor-arg ref="getFollowedGroupIds" />
		<constructor-arg ref="getGroupFollowerIds" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="getCoordinatorIdsByGroupId"
		class="org.eurekastreams.server.persistence.mappers.stream.GetCoordinatorIdsByGroupId">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="insertActivityComment"
		class="org.eurekastreams.server.persistence.mappers.stream.InsertActivityComment">
		<constructor-arg ref="commentDTOPopulator" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="commentDTOPopulator"
		class="org.eurekastreams.server.persistence.mappers.cache.cachedfieldpopulators.CommentDTOPopulator">
		<constructor-arg ref="bulkPeopleMapper" />
	</bean>

	<bean id="getCompositeStreamIdsByAssociatedActivity"
		class="org.eurekastreams.server.persistence.mappers.cache.GetCompositeStreamIdsByAssociatedActivity">
		<constructor-arg ref="getFollowerIds" />
		<constructor-arg ref="getGroupFollowerIds" />
		<constructor-arg ref="bulkPeopleByAccountIdMapper" />
		<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
	</bean>

	<bean id="postCachedActivity"
		class="org.eurekastreams.server.persistence.mappers.stream.PostCachedActivity">
		<constructor-arg ref="getFollowerIds" />
		<constructor-arg ref="bulkPeopleByAccountIdMapper" />
		<constructor-arg ref="getRecursiveParentOrgIdsMapper" />
		<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
		<constructor-arg ref="getOrgShortNamesByIdsMapper" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="postActivityUpdateStreamsByActorMapper"
		class="org.eurekastreams.server.persistence.mappers.cache.PostActivityUpdateStreamsByActorMapper">
		<constructor-arg ref="bulkPeopleByAccountIdMapper" />
		<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="updateCachedOrganizationNameMapper"
		class="org.eurekastreams.server.persistence.UpdateCachedOrganizationName">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="gadgetUserPrefMapper"
		class="org.eurekastreams.server.persistence.mappers.opensocial.GetGadgetUserPrefMapper">
	</bean>

	<bean id="getOrganizationTreeDTOMapper"
		class="org.eurekastreams.server.persistence.mappers.GetOrganizationTreeDTO">
		<property name="cache" ref="memcachedCache" />
		<property name="getOrganizationsByIdMapper" ref="bulkOrganizationsMapper" />
	</bean>

	<bean id="getRootOrganizationIdAndShortNameMapper"
		class="org.eurekastreams.server.persistence.mappers.GetRootOrganizationIdAndShortName" />

	<bean id="getRecursiveChildOrgIdsMapper"
		class="org.eurekastreams.server.persistence.mappers.GetRecursiveChildOrgIds">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="getRecursiveParentOrgIdsMapper"
		class="org.eurekastreams.server.persistence.mappers.GetRecursiveParentOrgIds">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="getDirectOrgIdsMapper"
		class="org.eurekastreams.server.persistence.mappers.GetDirectChildOrgIds">
		<property name="cache" ref="memcachedCache" />
	</bean>


	<bean id="getPrivateGroupIdsCoordinatedByPersonMapper"
		class="org.eurekastreams.server.persistence.mappers.GetPrivateGroupIdsCoordinatedByPerson" />

	<!-- TODO: rename this bean -->
	<bean id="clearActivityStreamSearchStringCacheOnGroupUpdate"
		class="org.eurekastreams.server.persistence.mappers.cache.ClearPrivateGroupIdsViewableByCoordinatorCacheOnGroupUpdate">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<!-- TODO: rename this bean -->
	<bean id="clearActivityStreamSearchStringCacheOnOrgUpdate"
		class="org.eurekastreams.server.persistence.mappers.cache.ClearPrivateGroupIdsViewableByCoordinatorCacheOnOrgUpdate">
		<constructor-arg ref="getOrgCoordinatorIdsFromDB" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="getPrivateCoordinatedAndFollowedGroupIdsForUserMapper"
		class="org.eurekastreams.server.persistence.mappers.cache.GetPrivateCoordinatedAndFollowedGroupIdsForUser">
		<constructor-arg ref="getPrivateGroupsByUserId" />
		<constructor-arg ref="getFollowedGroupIds" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="buildActivityStreamSearchStringForUserMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.BuildActivityStreamSearchStringForUser">
		<constructor-arg
			ref="getPrivateCoordinatedAndFollowedGroupIdsForUserMapper" />
	</bean>

	<bean id="getActivityIdsAuthoredByOrOriginallyAuthoredByEntityDBMapper"
		class="org.eurekastreams.server.persistence.mappers.db.GetActivityIdsAuthoredByOrOriginallyAuthoredByEntity" />

	<bean id="getActivityCommentIdsAuthoredByPersonIdDBMapper"
		class="org.eurekastreams.server.persistence.mappers.db.GetActivityCommentIdsAuthoredByPersonId" />

	<bean id="getActivityIdsWithFirstOrLastCommentsAuthoredByPersonIdDBMapper"
		class="org.eurekastreams.server.persistence.mappers.db.GetActivityIdsWithFirstOrLastCommentsAuthoredByPersonId" />

	<bean id="getCommentorIdsByActivityId"
		class="org.eurekastreams.server.persistence.mappers.db.GetCommentorIdsByActivityId" />

	<bean id="getTabPermissionByPersonAndTabMapper"
		class="org.eurekastreams.server.persistence.mappers.db.GetTabPermissionByPersonAndTab">
	</bean>

	<bean id="getNotificationFilterPreferencesByPersonId"
		class="org.eurekastreams.server.persistence.mappers.db.GetNotificationFilterPreferencesByPersonId" />

	<bean id="setUserNotificationFilterPreferences"
		class="org.eurekastreams.server.persistence.mappers.db.SetUserNotificationFilterPreferences" />

	<bean id="getNotificationFilterPreferencesByPeopleIds"
		class="org.eurekastreams.server.persistence.mappers.db.GetNotificationFilterPreferencesByPeopleIds" />

	<bean id="setAllApplicationAlertsAsReadByUserId"
		class="org.eurekastreams.server.persistence.mappers.db.SetAllApplicationAlertsAsReadByUserId" />

	<bean id="getApplicationAlertsByUserId"
		class="org.eurekastreams.server.persistence.mappers.db.GetApplicationAlertsByUserId" />

	<bean id="deleteApplicationAlertsByDate"
		class="org.eurekastreams.server.persistence.mappers.db.DeleteApplicationAlertsByDate" />

	<bean id="getUserIdsWithUnreadApplicationAlertsByDate"
		class="org.eurekastreams.server.persistence.mappers.db.GetUserIdsWithUnreadApplicationAlertsByDate" />

	<bean id="syncUnreadApplicationAlertCountCacheByUserId"
		class="org.eurekastreams.server.persistence.mappers.cache.SyncUnreadApplicationAlertCountCacheByUserId">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="getCachedAlertCountByUserId"
		class="org.eurekastreams.server.persistence.mappers.cache.GetCachedAlertCountByUserId">
		<constructor-arg ref="syncUnreadApplicationAlertCountCacheByUserId" />
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="populateOrgChildWithSkeletonParentOrgsCacheMapper"
		class="org.eurekastreams.server.persistence.mappers.cache.PopulateOrgChildWithSkeletonParentOrgsCacheMapper">
		<constructor-arg ref="bulkOrganizationsMapper" />
	</bean>

	<bean id="populatePeopleWithSkeletonRelatedOrgsCacheMapper"
		class="org.eurekastreams.server.persistence.mappers.cache.PopulatePeopleWithSkeletonRelatedOrgsCacheMapper">
		<constructor-arg ref="bulkOrganizationsMapper" />
		<constructor-arg ref="bulkPeopleMapper" />
	</bean>

	<bean id="deleteGroupActivity"
		class="org.eurekastreams.server.persistence.mappers.db.DeleteGroupActivity" />

	<bean id="removeGroupFollowers"
		class="org.eurekastreams.server.persistence.mappers.db.RemoveGroupFollowers" />

	<bean id="deleteGroupSubscriptions"
		class="org.eurekastreams.server.persistence.mappers.db.DeleteAllFeedSubscriberByEntityTypeAndId" />

	<bean id="deleteGroup"
		class="org.eurekastreams.server.persistence.mappers.db.DeleteGroup">
		<constructor-arg ref="findByIdMapper" />
		<constructor-arg ref="jpaOrganizationMapper" />
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.domain.strategies.OrganizationHierarchyTraverserBuilder" />
		</constructor-arg>
		<constructor-arg ref="getRecursiveParentOrgIdsMapper" />
		<constructor-arg ref="getOrgShortNamesByIdsMapper" />
	</bean>

	<bean id="getRelatedOrganizationIdsByPersonId"
		class="org.eurekastreams.server.persistence.mappers.GetRelatedOrganizationIdsByPersonId" />

	<bean id="updateActivityFlagMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.UpdateActivityFlag" />

	<bean id="getFlaggedActivitiesForOrganizationMapper"
		class="org.eurekastreams.server.persistence.mappers.stream.GetFlaggedActivitiesForOrganization">
		<constructor-arg ref="bulkActivitiesMapper" />
	</bean>

	<bean id="getExpiredActivities"
		class="org.eurekastreams.server.persistence.mappers.db.GetExpiredActivities" />

	<bean id="removeExpiredActivities"
		class="org.eurekastreams.server.persistence.mappers.cache.RemoveExpiredActivities">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="removeIdsFromLists"
		class="org.eurekastreams.server.persistence.mappers.cache.RemoveIdsFromLists">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="deleteSystemSettingsCacheMapper"
		class="org.eurekastreams.server.persistence.mappers.cache.DeleteSystemSettingsCacheMapper">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="deleteCacheKeys"
		class="org.eurekastreams.server.persistence.mappers.cache.DeleteCacheKeys">
		<property name="cache" ref="memcachedCache" />
	</bean>

	<bean id="deleteFromSearchIndex"
		class="org.eurekastreams.server.persistence.mappers.DeleteFromSearchIndex" />

	<bean id="updateNotificationsOnNameChangeMapper"
		class="org.eurekastreams.server.persistence.mappers.db.UpdateNotificationsOnNameChangeMapper" />

	<bean id="indexEntity"
		class="org.eurekastreams.server.persistence.mappers.IndexEntity" />

	<bean
		id="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.LIKERS_BY_ACTIVITY_ID"
		class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean" />


	<bean id="getPeopleWhoLikedActivity"
		class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.PartialCacheResultsMapper">
				<constructor-arg>
					<bean
						class="org.eurekastreams.server.persistence.mappers.cache.ToStringCacheKeySuffixTransformer" />
				</constructor-arg>
				<constructor-arg
					ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.LIKERS_BY_ACTIVITY_ID" />
				<constructor-arg value="True" />
				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>
		<constructor-arg>
			<!-- Database mapper to fall back on if not found in cache -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.db.GetPeopleWhoLikedActivityDbMapper" />
		</constructor-arg>
		<constructor-arg>
			<bean
				class="org.eurekastreams.server.persistence.mappers.chained.CollectionCombiner" />
		</constructor-arg>
		<constructor-arg>
			<!-- Cache refresher -->
			<bean
				class="org.eurekastreams.server.persistence.mappers.cache.SetKeyedCollectionCacheMapper">
				<constructor-arg
					ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.LIKERS_BY_ACTIVITY_ID" />
				<property name="cache" ref="memcachedCache" />
			</bean>
		</constructor-arg>
	</bean>

	<!-- Begin ldap mappers -->

	<bean id="findLdapGroupByCnNameMapper"
		class="org.eurekastreams.server.persistence.mappers.ldap.LdapLookup">
		<constructor-arg ref="searchStringLdapTemplateRetriever" />
		<constructor-arg ref="findLdapGroupByCnFilter" />
		<constructor-arg ref="ldapToLdapGroupCallbackFactory" />
		<constructor-arg ref="pagedLdapSearchStrategy" />
	</bean>

	<bean id="findLdapGroupByLdapGroupMembershipMapper"
		class="org.eurekastreams.server.persistence.mappers.ldap.LdapLookup">
		<constructor-arg ref="ldapGroupDnLdapTemplateRetriever" />
		<constructor-arg ref="findLdapGroupByMembershipFilter" />
		<constructor-arg ref="ldapToLdapGroupCallbackFactory" />
		<constructor-arg ref="pagedLdapSearchStrategy" />
	</bean>

	<bean id="findPersonByProvidedLdapQueryMapper"
		class="org.eurekastreams.server.persistence.mappers.ldap.LdapLookup">
		<constructor-arg ref="searchStringLdapTemplateRetriever" />
		<constructor-arg ref="findPersonByAttributeQueryFilter" />
		<constructor-arg ref="ldapToPersonCallbackFactory" />
		<constructor-arg ref="pagedLdapSearchStrategy" />
	</bean>

	<bean id="findPersonByCnWildcardMapper"
		class="org.eurekastreams.server.persistence.mappers.ldap.LdapLookup">
		<constructor-arg ref="searchStringLdapTemplateRetriever" />
		<constructor-arg ref="findPersonByCnWildcardFilter" />
		<constructor-arg ref="ldapToPersonCallbackFactory" />
		<constructor-arg ref="pagedLdapSearchStrategy" />
	</bean>

	<bean id="findPersonByDirectLdapGroupMembershipMapper"
		class="org.eurekastreams.server.persistence.mappers.ldap.LdapLookup">
		<constructor-arg ref="ldapGroupDnLdapTemplateRetriever" />
		<constructor-arg ref="findPersonByMembershipFilter" />
		<constructor-arg ref="ldapToPersonCallbackFactory" />
		<constructor-arg ref="pagedLdapSearchStrategy" />
	</bean>

	<!-- End ldap mappers -->
	
    <bean id="deleteOrganizationMapper" class="org.eurekastreams.server.persistence.mappers.db.DeleteOrganizationDbMapper" >
        <constructor-arg ref="findByIdMapper"/>
    </bean>
    
    <bean id="getPersonIds" class="org.eurekastreams.server.persistence.mappers.db.GetSerializableField" >
        <constructor-arg value="Person"/>
        <constructor-arg value="id"/>        
    </bean>
    
    <bean id="getGroupIds" class="org.eurekastreams.server.persistence.mappers.db.GetSerializableField" >
        <constructor-arg value="DomainGroup"/>
        <constructor-arg value="id"/>        
    </bean>    
    
    <bean id="getPersonsByIdsDBMapper" class="org.eurekastreams.server.persistence.mappers.db.GetPersonsByIds">
        <constructor-arg ref="personQueryStrategy" />
        <constructor-arg ref="getRelatedOrganizationIdsByPersonId" />
    </bean>  
    
    <bean id="getGroupsByIdsDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetGroupsByIdsDbMapper">
        <constructor-arg ref="domainGroupQueryStrategy" />
    </bean>
    
    <bean id="getFollowedGroupIdsForPersonByIdDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetFollowedGroupIdsForPersonByIdDbMapper" />
    
    <bean id="getFollowerPersonIdsForGroupByIdDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetFollowerPersonIdsForGroupByIdDbMapper" />    
    
    <bean id="getFollowerPersonIdsForPersonByIdDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetFollowerPersonIdsForPersonByIdDbMapper" />
    
    <bean id="getFollowedPersonIdsForPersonByIdDbMapper" class="org.eurekastreams.server.persistence.mappers.db.GetFollowedPersonIdsForPersonByIdDbMapper" />      
    
    <bean id="getRelatedEntityCountMapper" class="org.eurekastreams.server.persistence.mappers.db.GetRelatedEntityCount" />
	
	<bean id="moveOrganizationPeopleMapper" class="org.eurekastreams.server.persistence.mappers.db.MoveOrganizationPeopleDBMapper" />
	
	<bean id="getListsContainingActivities" class="org.eurekastreams.server.persistence.mappers.db.GetListsContainingActivities">
		<constructor-arg ref="getRecursiveParentOrgIdsMapper" />
        <constructor-arg ref="getOrgShortNamesByIdsMapper" />
	</bean>
	
	<bean id="getPeopleIdsWithRelatedOrg" class="org.eurekastreams.server.persistence.mappers.db.GetPeopleIdsWithRelatedOrg" />
	
	<bean id="syncParentOrgForGroupActivities" class="org.eurekastreams.server.persistence.mappers.db.SyncParentOrgForGroupActivities" />
	
	<bean id="getActivityIdsPostedToStreamByUniqueKeyAndScopeType" 
	    class="org.eurekastreams.server.persistence.mappers.db.GetActivityIdsPostedToStreamByUniqueKeyAndScopeType" />                

	<bean id="insertRequestForGroupMembershipMapper"
		class="org.eurekastreams.server.persistence.mappers.db.InsertRequestForGroupMembership" />

	<bean id="deleteRequestForGroupMembershipMapper"
		class="org.eurekastreams.server.persistence.mappers.db.DeleteRequestForGroupMembership" />

	<bean id="getRequestsForGroupMembershipMapper"
		class="org.eurekastreams.server.persistence.mappers.db.GetRequestsForGroupMembershipByGroup" />

	<bean id="updateGadgetsWithNewTabLayoutMapper"
		class="org.eurekastreams.server.persistence.mappers.db.UpdateGadgetsWithNewTabLayoutMapper" />

	<bean id="getOrganizationProxyById"
		class="org.eurekastreams.server.persistence.mappers.db.GetOrganizationProxyById" />

	<bean id="getPersonIdsByLockedStatus"
		class="org.eurekastreams.server.persistence.mappers.db.GetPersonIdsByLockedStatus" />

	<bean id="setPersonLockedStatus"
		class="org.eurekastreams.server.persistence.mappers.db.SetPersonLockedStatus" />

	<bean id="increaseOrgEmployeeCount"
		class="org.eurekastreams.server.persistence.mappers.db.IncreaseOrgEmployeeCount" />
		
	<bean id="getOrgShortNamesByIdsMapper"
		class="org.eurekastreams.server.persistence.mappers.db.GetOrgShortNamesByIdsMapper" />
		
	<bean id="getReadOnlyStreamsDbMapper"
		class="org.eurekastreams.server.persistence.mappers.db.GetReadOnlyStreamsDbMapper" />
</beans>
